{"componentChunkName":"component---src-templates-blog-js","path":"/spring-testing/","result":{"data":{"markdownRemark":{"fields":{"slug":"/spring-testing/"},"id":"648b4be4-fb65-5b4d-8218-dd5823544959","html":"<h1 id=\"services\" style=\"position:relative;\"><a href=\"#services\" aria-label=\"services permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Services</h1>\n<ul>\n<li>unit tests should be very fast and lightweight</li>\n<li>for unit tests of service layer, we just use junit and mockito, and use mocks for data access objects, i.e. <code class=\"language-text\">@Mock</code> for repositories and <code class=\"language-text\">@InjectMocks</code> for services</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ExtendWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MockitoExtension</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderServiceTests</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token annotation punctuation\">@Mock</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">OrderRepository</span> orderRepository<span class=\"token punctuation\">;</span>\n\n  <span class=\"token annotation punctuation\">@Mock</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">PaymentRepository</span> paymentRepository<span class=\"token punctuation\">;</span>\n\n  <span class=\"token annotation punctuation\">@InjectMocks</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">OrderService</span> orderService<span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>the above method works, but does not make use of spring. the method below uses spring</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ExtendWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringExtension</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@ContextConfiguration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token class-name\">OrderService</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderServiceTests</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token annotation punctuation\">@MockBean</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">OrderRepository</span> orderRepository<span class=\"token punctuation\">;</span>\n  \n  <span class=\"token annotation punctuation\">@MockBean</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">PaymentRepository</span> paymentRepository<span class=\"token punctuation\">;</span>\n  \n  <span class=\"token annotation punctuation\">@Autowired</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">OrderService</span> orderService<span class=\"token punctuation\">;</span>\n  \n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id=\"controllers\" style=\"position:relative;\"><a href=\"#controllers\" aria-label=\"controllers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Controllers</h1>\n<ul>\n<li>for unit tests of controller layer, we use <code class=\"language-text\">@WebMvcTest</code>, which scans classes like <code class=\"language-text\">@RestController</code>, <code class=\"language-text\">@ControllerAdvice</code>, etc. <code class=\"language-text\">@WebMvcTest</code> wonâ€™t scan the service layer, so we have to use <code class=\"language-text\">@MockBean</code> for services</li>\n<li>we can specify the controller to use via <code class=\"language-text\">@WebMvcTest(OrderController.class)</code>. otherwise, we may have to use <code class=\"language-text\">@MockBean</code> for all classes that any of the controllers depend on</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@WebMvcTest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OrderController</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderControllerTests</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token annotation punctuation\">@MockBean</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">OrderService</span> orderService<span class=\"token punctuation\">;</span>\n  \n  <span class=\"token annotation punctuation\">@Autowired</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">MockMvc</span> mockMvc<span class=\"token punctuation\">;</span>\n  \n  <span class=\"token annotation punctuation\">@Test</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    mockMvc<span class=\"token punctuation\">.</span><span class=\"token function\">perform</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/order/{id}/receipt\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">andExpect</span><span class=\"token punctuation\">(</span><span class=\"token function\">jsonPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$.creditCardNumber\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"4532756279624064\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">andExpect</span><span class=\"token punctuation\">(</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id=\"validation\" style=\"position:relative;\"><a href=\"#validation\" aria-label=\"validation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Validation</h1>\n<ul>\n<li>we should write unit tests for different combinations to ensure our validation rules on pojos are correct</li>\n<li>they should be very fast and should not require loading up the spring context</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ValidationTests</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Validator</span> validator <span class=\"token operator\">=</span> <span class=\"token class-name\">Validation</span><span class=\"token punctuation\">.</span><span class=\"token function\">buildDefaultValidatorFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValidator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token annotation punctuation\">@Test</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">creditCardNumberMustNotBeNull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">PaymentRequest</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PaymentRequest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ConstraintViolation</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PaymentRequest</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> violations <span class=\"token operator\">=</span> validator<span class=\"token punctuation\">.</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assertTrue</span><span class=\"token punctuation\">(</span>violations<span class=\"token punctuation\">.</span><span class=\"token function\">isNotEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id=\"data-layer\" style=\"position:relative;\"><a href=\"#data-layer\" aria-label=\"data layer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Data Layer</h1>\n<ul>\n<li><code class=\"language-text\">@DataJpaTest</code> configures all dependencies related to database layer like repositories, <code class=\"language-text\">JdbcTemplate</code>, etc.</li>\n<li>it also configures the in memory database if it can find one</li>\n<li>we can leave the migrations scripts of liquibase / flyway in place</li>\n<li>however, since there are different flavours of sql, our migration scripts can fail on h2</li>\n<li>so, we can use <code class=\"language-text\">TestContainers</code>, which can help in spinning up docker containers for database easily</li>\n<li>spring can catch errors related to query dsl itself, even catch syntax errors in jpql</li>\n<li>however, it cannot catch errors in native queries</li>\n<li><code class=\"language-text\">@DataJpaTest</code> has <code class=\"language-text\">@Transactional</code>, which makes it go to the initial state after every test</li>\n<li><code class=\"language-text\">TestEntityManager</code> can be used to save objects</li>\n<li>we might have to use <code class=\"language-text\">persistAndFlush</code> to write to the database, otherwise the changes just stay in the persistence context and are not necessarily synchronized to the database</li>\n<li>e.g. below helps get errors related to constraints -</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@DataJpaTest</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PaymentRepositoryTests</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token annotation punctuation\">@Autowired</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">TestEntityManager</span> testEntityManager<span class=\"token punctuation\">;</span>\n\n  <span class=\"token annotation punctuation\">@Autowired</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">PaymentRepository</span> paymentRepository<span class=\"token punctuation\">;</span>\n\n  <span class=\"token annotation punctuation\">@Test</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token function\">assertThrows</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PersistenceException</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> testEntityManager<span class=\"token punctuation\">.</span><span class=\"token function\">persistAndFlush</span><span class=\"token punctuation\">(</span>payment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id=\"serialization-and-deserialization\" style=\"position:relative;\"><a href=\"#serialization-and-deserialization\" aria-label=\"serialization and deserialization permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Serialization and Deserialization</h1>\n<ul>\n<li>we can only test serialization using <code class=\"language-text\">@JsonTest</code></li>\n<li>this is important as many times, we override the behavior of what is there in java pojo vs what gets sent</li>\n<li><code class=\"language-text\">@JsonTest</code> configures the context related to jackson like creating classes with <code class=\"language-text\">@JsonComponent</code>, etc.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@JsonTest</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderRequestTests</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token annotation punctuation\">@Autowired</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">JacksonTester</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OrderRequest</span><span class=\"token punctuation\">></span></span> jacksonTester<span class=\"token punctuation\">;</span>\n  \n  <span class=\"token annotation punctuation\">@Test</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">deserializeTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">String</span> json <span class=\"token operator\">=</span> <span class=\"token string\">\"{\\\"amount\\\": \\\"USD50.00\\\"}\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">OrderRequest</span> orderRequest <span class=\"token operator\">=</span> jacksonTester<span class=\"token punctuation\">.</span><span class=\"token function\">parseObject</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> orderRequest<span class=\"token punctuation\">.</span><span class=\"token function\">getAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Test</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">serializeTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">OrderRequest</span> orderRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OrderRequest</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">JsonContent</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OrderRequest</span><span class=\"token punctuation\">></span></span> json <span class=\"token operator\">=</span> jacksonTester<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>orderRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"USD50.00\"</span><span class=\"token punctuation\">,</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">extractingJsonPathStringValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$.amount\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id=\"integration-tests\" style=\"position:relative;\"><a href=\"#integration-tests\" aria-label=\"integration tests permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Integration Tests</h1>\n<ul>\n<li>use <code class=\"language-text\">@SpringBootTest</code> to load the entire spring context</li>\n<li>have to separately add <code class=\"language-text\">@AutoConfigureMockMvc</code> for using MockMvc</li>\n<li>have to separately add <code class=\"language-text\">@Transactional</code> to roll back changes after every test</li>\n<li>we can still use <code class=\"language-text\">@MockBean</code> for classes e.g. some service which makes calls to an external api</li>\n<li>if we want to actually involve the http stack as well, we can use <code class=\"language-text\">@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)</code></li>\n<li>however we cannot use <code class=\"language-text\">MockMvc</code> any longer, so we can autowire <code class=\"language-text\">WebTestClient</code> or <code class=\"language-text\">TestRestTemplate</code></li>\n<li>another issue when spinning up the environment this way is that <code class=\"language-text\">@Transactional</code> may not work as desired, i.e. server and client threads are different. so, transactions for the two have different meaning. this means if we actually save stuff manually via repositories, we may need to call <code class=\"language-text\">deleteAll</code> on the repositories in <code class=\"language-text\">@BeforeEach</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@SpringBootTest</span><span class=\"token punctuation\">(</span>webEnvironment <span class=\"token operator\">=</span> <span class=\"token constant\">RANDOM_PORT</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token annotation punctuation\">@ActiveProfiles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AccountServiceApplicationTest</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token annotation punctuation\">@LocalServerPort</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> port<span class=\"token punctuation\">;</span>\n\n  <span class=\"token annotation punctuation\">@Autowired</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">TestRestTemplate</span> testRestTemplate<span class=\"token punctuation\">;</span>\n\n  <span class=\"token annotation punctuation\">@Autowired</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">AccountDao</span> accountDao<span class=\"token punctuation\">;</span>\n\n  <span class=\"token annotation punctuation\">@BeforeEach</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    accountDao<span class=\"token punctuation\">.</span><span class=\"token function\">deleteAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">baseUrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"http://localhost:\"</span> <span class=\"token operator\">+</span> port<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id=\"miscellaneous\" style=\"position:relative;\"><a href=\"#miscellaneous\" aria-label=\"miscellaneous permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Miscellaneous</h1>\n<ul>\n<li>spring caches application context to share between tests to avoid recreating the context everytime</li>\n<li>we can always add additional properties to the tests using <code class=\"language-text\">@TestPropertySource</code>, its like overriding the properties inside the properties file for specific tests</li>\n<li>we can also use the <code class=\"language-text\">@ActiveProfiles</code> on a test class to read from a specific properties file, e.g. <code class=\"language-text\">@ActiveProfiles({\"embedded\"})</code> would look for application-embedded.yml</li>\n<li>read about <code class=\"language-text\">MockWebServer</code> to handle code which makes calls to an external api</li>\n<li><code class=\"language-text\">@RunWith</code> has been replaced with <code class=\"language-text\">@ExtendWith</code></li>\n<li>so, the older way was <code class=\"language-text\">@RunWith(SpringRunner.class)</code> and now it is <code class=\"language-text\">@ExtendWith(SpringExtension.class)</code>. this is a way of telling junit and to add spring support</li>\n<li><code class=\"language-text\">@SpyBean</code> works like <a href=\"http://localhost:9000/junit-&#x26;-mockito\">spies in mockito</a> i.e. mock a subset of methods</li>\n<li><code class=\"language-text\">@DataJpaTest</code> was not working for me i.e. it was trying to configure all my configuration classes and components and not just the ones related to dao layer. solution was to remove the annotation related to <code class=\"language-text\">@ComponentScan</code> from class with <code class=\"language-text\">@SpringBootApplication</code> and refactor to it another <code class=\"language-text\">@Configuration</code> class. refer the <a href=\"https://stackoverflow.com/q/62652516/11885333\">first comment</a> for details on this</li>\n</ul>","frontmatter":{"title":"Spring Testing"}}},"pageContext":{"id":"648b4be4-fb65-5b4d-8218-dd5823544959"}},"staticQueryHashes":["1037383464","1617985380"]}