{"componentChunkName":"component---src-templates-blog-js","path":"/aws-part-i/","result":{"data":{"markdownRemark":{"fields":{"slug":"/aws-part-i/"},"id":"a087f816-e845-5a94-975b-0a55dbf009bb","html":"<h1 id=\"accounts\" style=\"position:relative;\"><a href=\"#accounts\" aria-label=\"accounts permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Accounts</h1>\n<ul>\n<li>container of users and resources</li>\n<li>needs a name, unique email and password. only email needs to be unique</li>\n<li>a root user is created using the email we provide</li>\n<li>account root user has full access to everything and this access cannot be restricted</li>\n<li>iam can be used to create different identities, and they have no access initially</li>\n<li>even external users have no access initially on our aws resources</li>\n<li>mfa allows us to add multiple layers of authentication\n<ul>\n<li>knowledge - user and password</li>\n<li>possession - physical devices historically, nowadays virtual devices like google authenticator is allowed</li>\n<li>inherent - biometric scans</li>\n<li>location - whitelist ip ranges</li>\n</ul>\n</li>\n<li>physical device for mfa examples - u2f device like yubikey, gemalto token</li>\n</ul>\n<h3 id=\"account-setup\" style=\"position:relative;\"><a href=\"#account-setup\" aria-label=\"account setup permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Account Setup</h3>\n<p>steps to perform ideally after creating an account for free tier</p>\n<ul>\n<li>grant iam users access to billing information</li>\n<li>secure root user with mfa</li>\n<li>under billing preferences, check all options like receive billing alerts, receive free tier exceeded alerts, etc</li>\n<li>create cost budget - create a recurring budget so that it renews every month automatically, and set an alert threshold so that we are notified when we reach a certain percentage of the budgeted amount</li>\n<li>default account alias is account id, we can change this if we want to. this needs to be globally unique. my understanding - the login link for iam users is <a href=\"https://account-alias.signin.aws.amazon.com/console\">https://account-alias.signin.aws.amazon.com/console</a></li>\n<li>create an iam user and attach the managed policy administrator access</li>\n<li>secure iam admin user above with mfa</li>\n<li>create access keys</li>\n<li>install aws cli</li>\n<li>setup aws cli - <code class=\"language-text\">aws configure --profile xyz</code></li>\n</ul>\n<h1 id=\"cloud-computing\" style=\"position:relative;\"><a href=\"#cloud-computing\" aria-label=\"cloud computing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cloud Computing</h1>\n<ul>\n<li>nist - national institute of standards and technology - five features to meet to be called cloud\n<ul>\n<li>on demand infrastructure provisioning without human interaction (i.e. support teams)</li>\n<li>infrastructure is available over network and standard mechanisms like http, ssh, etc</li>\n<li>resource pooling -\n<ul>\n<li>users have no control over exact location of resources</li>\n<li>resources are pooled to serve multiple consumers using a multi-tenant model i.e. aws manages capacity for all consumers through shared hardware, thus making it more scalable</li>\n</ul>\n</li>\n<li>rapid elasticity - can easily scale applications up and down</li>\n<li>resources can be easily monitored and reported</li>\n</ul>\n</li>\n<li>public cloud - aws, gcp, azure - meets the five features above and available for use to the public</li>\n<li>multi cloud - using multiple public clouds. helps with high availability and resilience</li>\n<li>private cloud - run cloud from on prem. aws outposts for aws, azure stack for azure, anthos for gcp</li>\n<li>hybrid cloud - public cloud + private cloud</li>\n<li>hybrid environment or hybrid networking - connecting on prem to public cloud</li>\n<li>on premise - company managed everything. more flexible</li>\n<li>dc hosting - data center hosting - facility is owned and managed by vendor, virtualization by us</li>\n<li>iaas - infrastructure as a service. facility and virtualization is entirely managed by provider. we only manage runtime and the applications running on these runtimes. e.g. aws</li>\n<li>paas - platform as a service. even the runtime is managed by provider. e.g. heroku</li>\n<li>saas - software as a service. we only consume the application. e.g. office 365, gmail, etc</li>\n<li>rpo and rto are given by clients after discussing with them</li>\n<li>recovery point objective (rpo) - maximum amount of data (in time) that an organization can afford to lose during a disaster. e.g. this would be next to 0 for banks. backups can be full or incremental, and our backup intervals should be at least equal to rpo, can be lesser</li>\n<li>recovery time objective (rto) - maximum amount of time that an organization can afford to be down during a disaster. rto includes bringing the application back to a fully functional state</li>\n<li>vertical scaling -\n<ul>\n<li>can result in a disruption of our service, while we vertically scale up</li>\n<li>there is an upper cap of how much we can improve performance</li>\n<li>can work with stateful applications without application modifications</li>\n</ul>\n</li>\n<li>horizontal scaling -\n<ul>\n<li>no downtime when we increase number of instances</li>\n<li>there is no upper cap with this</li>\n<li>a load balancer sits between the customers and servers to distribute the load evenly between the servers</li>\n<li>sessions can no longer be stored on the server, so the solution is to use off host sessions i.e. an external server where the session data is stored or use sticky sessions i.e. the load balancer redirects requests from the same client to the same server</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"basics\" style=\"position:relative;\"><a href=\"#basics\" aria-label=\"basics permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Basics</h1>\n<ul>\n<li>aws public service - can be accessed via an endpoint publicly. runs inside aws public zone</li>\n<li>aws private service - can only be accessed from inside a vpc. vpcs exist inside aws private zone</li>\n<li>we can connect igw to vpc so that aws private services can talk to internet</li>\n<li>we can connect on prem to vpc using vpn or direct connect</li>\n<li>even when aws private services use igw to talk to aws public services, it actually uses aws network and does not go over the public internet. e.g. ec2 to s3. even if in different regions, they use aws global network</li>\n<li>aws regions - most services are region scoped. but they can be far from customers</li>\n<li>aws edge locations - much smaller than regions and closer to customers. for content distribution and edge computing. e.g. by streaming platforms like netflix</li>\n<li>geographical separation - each region is physically isolated. so it can be used for fault tolerance</li>\n<li>geopolitical separation - our infrastructure is influenced by laws of the region</li>\n<li>location control - place infrastructure close to customers for higher performance</li>\n<li>regions have codes, e.g. ap-southeast-2 for sydney</li>\n<li>regions have multiple azs - each az is physically isolated. e.g ap-southeast-2a, 2b and 2c</li>\n<li>an az is a collection of data centers</li>\n<li>azs in the same region are connected via high speed networking</li>\n<li>globally resilient - can tolerate failure of multiple regions. e.g. iam, route53</li>\n<li>region resilient - operate in a single region. usually run across azs</li>\n<li>az resilient - runs in an az. e.g. particular hardware inside an az fails, the service can still continue to work. recall how an az is internally a collection of data centers</li>\n</ul>\n<h1 id=\"cloudwatch\" style=\"position:relative;\"><a href=\"#cloudwatch\" aria-label=\"cloudwatch permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cloudwatch</h1>\n<p>has three features - metrics, logs and events</p>\n<h3 id=\"cloudwatch-metrics\" style=\"position:relative;\"><a href=\"#cloudwatch-metrics\" aria-label=\"cloudwatch metrics permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cloudwatch Metrics</h3>\n<ul>\n<li>collection of metrics, monitoring of metrics and performing actions based on metrics. some metrics require a cloudwatch agent to be running, e.g. servers running on premises</li>\n<li>for some <u>metrics like memory utilization, disk space utilization</u>, etc. which are not readily available, inside cloudwatch, we have to rely on <u>custom metrics</u> for them</li>\n<li>namespace - it is a container for related metrics to manage data easily. all aws data goes to <code class=\"language-text\">AWS/&lt;&lt;service-name>></code>, e.g. <code class=\"language-text\">AWS/EC2</code> for ec2</li>\n<li>metric - time ordered set of datapoints. a metric is not for a specific server, e.g. cpu utilization is a metric, and we can be receiving it from multiple servers</li>\n<li>datapoint - has two parts - timestamp and a value e.g. 94% cpu utilization</li>\n<li>dimension - name value pairs which for e.g. help separate metrics for different servers from one another. e.g. ec2 instances send instance type, instance id, etc. as dimensions</li>\n<li>cloudwatch alarms can be used to take actions like putting data into sns topics or autoscaling an asg based on the metrics they monitor. an alarm can be in ok, alarm state or insufficient data state at the beginning</li>\n</ul>\n<h3 id=\"cloudwatch-logs\" style=\"position:relative;\"><a href=\"#cloudwatch-logs\" aria-label=\"cloudwatch logs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cloudwatch Logs</h3>\n<ul>\n<li>collection of logs, monitoring of logs and performing actions based on logs. again, for instance for logs of vms running on premise, we need a cloudwatch agent</li>\n<li>since it is an aws public service, we can easily use it from on premise</li>\n<li>aws services like ec2, vpc flow logs, cloudtrail, etc. integrate with cloudwatch logs</li>\n<li>we can generate metrics from logs. this is called metric filter. the metric can increment everytime it finds the word error in the log data, and based on this, an alarm can be triggerred</li>\n<li>log events - have a timestamp and message. we can parse the message if we want</li>\n<li>log stream - log events are stored inside a log stream. each log stream can represent a specific source</li>\n<li>log groups - containers for multiple log streams. things like retentions, metric filters, etc. are applied at the log group level, so it cascades to all log streams inside it</li>\n</ul>\n<h3 id=\"cloudwatch-events\" style=\"position:relative;\"><a href=\"#cloudwatch-events\" aria-label=\"cloudwatch events permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cloudwatch Events</h3>\n<ul>\n<li>cloudwatch events is an event hub\n<ul>\n<li>if an aws service does something, e.g. an ec2 is terminated, cloudwatch events will generate an event which can be used to trigger some other action</li>\n<li>trigger an event based on a cron</li>\n</ul>\n</li>\n<li>event bridge is the successor of cloudwatch events, since it works with third party tools as well - it is like a superset of cloudwatch events</li>\n<li>both use the default event bus (one per aws account)</li>\n<li>cloudwatch events only use this, and it is not exposed, with event bridge we can create custom event buses, and we also gain visibility into the underlying event bus</li>\n<li><u>rules</u> - match <u>event patterns</u> or <u>cron</u> and if they match, they send it to a <u>target</u> e.g. lambda. note - rules can be associated with one event bus at a time</li>\n</ul>\n<h1 id=\"iam\" style=\"position:relative;\"><a href=\"#iam\" aria-label=\"iam permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>IAM</h1>\n<ul>\n<li>iam is a globally resilient service</li>\n<li>our account trusts its iam - if iam allows an identity to do something, the account trusts it to do that</li>\n<li>types of identity -\n<ul>\n<li>user - represent users and applications</li>\n<li>group - collection of related users</li>\n<li>role - used by aws services or granting external access</li>\n</ul>\n</li>\n<li>iam uses -\n<ul>\n<li>manage identities - idp (identity provider) to crud identities</li>\n<li>authentication</li>\n<li>authorization</li>\n</ul>\n</li>\n<li>least privilege principle - only give identities enough access for them to do their job, not more</li>\n</ul>\n<h3 id=\"access-keys\" style=\"position:relative;\"><a href=\"#access-keys\" aria-label=\"access keys permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Access Keys</h3>\n<ul>\n<li>access keys - long term credentials, just like username and password</li>\n<li>access keys can be created and deleted, or made inactive and active</li>\n<li>it has two parts - access key id (like username) and secret access key (like password)</li>\n<li>we can only see the secret access key once when we create them</li>\n<li>we rotate access keys ourselves</li>\n<li>we are allowed only two sets of access keys at a time to help with rotation</li>\n<li>iam users can have access keys, iam roles cannot</li>\n</ul>\n<h3 id=\"identity-policy\" style=\"position:relative;\"><a href=\"#identity-policy\" aria-label=\"identity policy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Identity Policy</h3>\n<ul>\n<li>policy - attached to other identities</li>\n<li>allow or deny access to resources</li>\n<li>identity policies are written in json</li>\n<li>parts of a statement (separc) -\n<ul>\n<li>statement id - optional, helps identify a statement</li>\n<li>effect - allow / deny</li>\n<li>principal - <em>not for identity policy, only for resource policy</em></li>\n<li>action - can be a list or a string, can be a wildcard</li>\n<li>resource - we have to use arn</li>\n<li>condition</li>\n</ul>\n</li>\n<li>when we make an api call, after authenticating us, iam goes through all statements of all policies which apply to our identity. it then filters out the statements which apply to our api call and then decides whether we can perform the api call. now, if we have overlapping statements, the order followed is - explicit deny, explicit allow, implicit deny, i.e. if any statement has an explicit deny, it wins. if there is no explicit deny, and there is an explicit allow, then allow wins, and if there are no statements matching our api call, the implicit deny is used</li>\n<li>when evaluating, policies from all sources - attached directly to identity, attached to group or attached to resource are combined and then processed using the deny-allow-deny rule described above</li>\n<li>inline policy - created directly inside an identity. using this makes managing policies difficult, since our approach is no longer dry if we want to reuse that policy</li>\n<li>so, we can use a managed policy, and attach it to as many identities as we want. managed policies can be both aws managed or customer managed</li>\n<li>inline policy can be used for exceptional cases, so that they are not erroneously attached to other identities. this way, deleting an identity deletes its inline policies</li>\n</ul>\n<h3 id=\"iam-users\" style=\"position:relative;\"><a href=\"#iam-users\" aria-label=\"iam users permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>IAM Users</h3>\n<ul>\n<li>iam users can represent an identity that needs long term credentials for aws access</li>\n<li>this can be a human, an application or a service account</li>\n<li>principal - one of the above</li>\n<li>a principal authenticates against an identity</li>\n<li>this can be done using username and password or access keys</li>\n<li>after this, the authorization checks described in <a href=\"#identity-policy\">identity policy</a> is carried out</li>\n<li>hard limit of 5000 iam users per account</li>\n<li>an iam user can be a part of a maximum of 10 iam groups</li>\n</ul>\n<h3 id=\"arn\" style=\"position:relative;\"><a href=\"#arn\" aria-label=\"arn permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ARN</h3>\n<ul>\n<li>all resources have a unique arn (amazon resource name). the format is <code class=\"language-text\">arn:&lt;&lt;partition>>:&lt;&lt;service-name>>:&lt;&lt;region>>:&lt;&lt;account-number>>:&lt;&lt;resource-id>></code> (apsrar). <code class=\"language-text\">resource-id</code> can be <code class=\"language-text\">resource-type/resource-id</code> and <code class=\"language-text\">resource-type:resource-id</code> as well</li>\n<li>partition is usually <code class=\"language-text\">aws</code></li>\n<li>we can use regex as well to define a group of resources</li>\n<li>arn can uniquely identify resources across accounts and regions</li>\n<li>for s3 bucket’s arn, we can skip the region and account number since the bucket name is globally unique</li>\n<li>caveat - <code class=\"language-text\">arn:aws:s3:::catgifs</code> and <code class=\"language-text\">arn:aws:s3:::catgifs/*</code> are not the same, first one is for an actual bucket, while the second one refers to objects inside the bucket, and not the bucket itself</li>\n<li>not specifying a region != using <code class=\"language-text\">*</code> for region. using <code class=\"language-text\">*</code> means for e.g. all regions</li>\n</ul>\n<h3 id=\"iam-groups\" style=\"position:relative;\"><a href=\"#iam-groups\" aria-label=\"iam groups permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>IAM Groups</h3>\n<ul>\n<li>container for users, and makes managing iam users easier</li>\n<li>an iam user can be a part of multiple groups</li>\n<li>a group can have any number of (max 5000?) iam users</li>\n<li>there is no default group having all users in iam unlike some other idps</li>\n<li>there is no nesting of groups as well unlike some other idps</li>\n<li>resource policies can reference iam users and roles but not iam groups. iam groups cannot be used as a principal in resource policies</li>\n<li>my understanding - in identity policies, the principal is the resource itself?</li>\n</ul>\n<h3 id=\"iam-roles\" style=\"position:relative;\"><a href=\"#iam-roles\" aria-label=\"iam roles permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>IAM Roles</h3>\n<ul>\n<li>iam users which are meant to be used by a single principal</li>\n<li>iam roles are meant to be used by multiple principals</li>\n<li>roles are meant to be assumed temporarily</li>\n<li>after assuming a role, permissions of user becomes that of the role that it assumed</li>\n<li>iam roles have two types of policies -\n<ul>\n<li>trust policy - defines which identities can assume the role. it can be iam identities in the same account, in different account or aws services. it also allows anonymous usage i.e. identities of facebook, google, etc</li>\n<li>permissions policy</li>\n</ul>\n</li>\n<li>like iam users, iam roles can be referenced within the principal of resource policies</li>\n<li>temporary credentials are generated for roles. they are like access keys, but have an expiration</li>\n<li>these temporary credentials are generated with the help of sts</li>\n<li>since they are temporary, we get automatic rotation of access keys</li>\n</ul>\n<h3 id=\"examples-of-uses-of-roles\" style=\"position:relative;\"><a href=\"#examples-of-uses-of-roles\" aria-label=\"examples of uses of roles permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Examples of Uses of Roles</h3>\n<ul>\n<li>by aws services, so that it can do things with other aws services, e.g. accessing s3. we can somehow provide access keys to the service, but for e.g. the execution role in lambda is a better option</li>\n<li>break glass for key mechanism - iam roles can be assumed by support team for higher privileges in one off use cases when there is a need for this</li>\n<li>a firm can have an existing idp, e.g. active directory, and we would want our existing sso to access aws. also, iam users have a limit of 5000. roles can help use existing identities. this process of trusting external identities is called identity federation</li>\n<li>the example above was trusting a firm’s identity provider. we can also use web identity federation, e.g. we have an app used by millions of users that uses dynamodb bts. the millions of users can assume this role</li>\n<li>cross account access - e.g. roles of one account can be assumed by identities of another account. this is used in aws organizations as well, where we only have users in general account, and they can assume different roles present in the other accounts</li>\n</ul>\n<h3 id=\"service-linked-roles\" style=\"position:relative;\"><a href=\"#service-linked-roles\" aria-label=\"service linked roles permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Service Linked Roles</h3>\n<ul>\n<li>an iam role linked to a specific service</li>\n<li><u>it has a predefined set of permissions</u></li>\n<li>we cannot delete a service linked role unless it is no longer being used by an aws service</li>\n<li>service linked role can be created by us or by the service itself</li>\n<li>pass role (<code class=\"language-text\">iam:PassRole</code>) - a user with this permission can pass a role to an aws service. e.g. when creating cloudformation stacks, by default, cloudformation uses the permissions of our identity to create the stack. we can however configure it to use the permissions of a role. this way, the identity can just have basic permissions like creating a stack and the pass role permission</li>\n</ul>\n<h1 id=\"cloudtrail\" style=\"position:relative;\"><a href=\"#cloudtrail\" aria-label=\"cloudtrail permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cloudtrail</h1>\n<ul>\n<li>all api calls are logged, and one such log is called a cloudtrail event</li>\n<li>by default, it stores the last 90 days of cloudtrail events in the “cloudtrail event history”</li>\n<li>cloudtrail events have three types - management events, data events and insight events</li>\n<li>management events - called control plane operations like creating or terminating an ec2</li>\n<li>data events - operations performed on a resource, e.g. lambda invocations, s3 object uploads, etc</li>\n<li>by default, only management events are logged and not data events, since they are of high volume</li>\n<li>cloudtrail trail - how we provide configuration, if the default “cloudtrail event history” isn’t enough for us</li>\n<li>cloudtrail is a regional product</li>\n<li>however, the trail can be configured to be a one region or all region trail</li>\n<li>some services which are global like cloudfront, iam, etc. log events to us-east-1</li>\n<li>however, an option can be checked on a trail to receive these global events</li>\n<li>a cloudtrail trail can send logs to s3 or cloudwatch logs</li>\n<li>organizational trail - logs for all accounts in the organization</li>\n<li><u>there is a delay before logs reach cloudtrail, it is not realtime</u></li>\n</ul>\n<h1 id=\"aws-organizations\" style=\"position:relative;\"><a href=\"#aws-organizations\" aria-label=\"aws organizations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AWS Organizations</h1>\n<ul>\n<li>allows larger businesses to manage multiple aws accounts with little to no management overhead</li>\n<li>an aws organization is created using an account, and this account becomes the management / master account</li>\n<li>now, this management account can invite other aws accounts to join the organization. once these accounts approve this invite, they too become part of the organization, and become member accounts</li>\n<li>organizations have only one management / master account and 0 to many member accounts</li>\n<li>we can build a nested structure to manage these accounts\n<ul>\n<li>organizational root which can contain accounts (member or management) and other organizational units</li>\n<li>organizational units which can contain accounts (member or management) and other organizational units</li>\n</ul>\n</li>\n<li>aws organizations have consolidated billing - the individual billing information is removed from the member accounts, and billing is passed to the management account. so, management account is also called payer account in the context of billing. so, we get only one bill. to confirm - also, services get cheaper with more usage, since the usage from all accounts is pooled</li>\n<li>we can also create new accounts inside the organization. this way\n<ul>\n<li>we do not go through the invite process</li>\n<li>we do not need to create the role described below</li>\n</ul>\n</li>\n<li>with organizations, we should not have iam users in every account. instead, a different account is used for login. this can be the management account or another dedicated account. this login account can either have iam users or use identity federation. regardless, we do a role switch to gain access to other member accounts</li>\n<li>a role automatically created when creating an account inside an organization. when creating an account from outside and then going through the invite process, to create this role -\n<ul>\n<li>go to create an iam role</li>\n<li>select trusted entity as aws account, and enter the management account id. this is the trust policy</li>\n<li>attach the administrator access policy. this is the permission policy</li>\n<li>the role can be named OrganizationAccountAccessRole, since this is the name of the automatically generated role in case of accounts created inside the organization as well</li>\n</ul>\n</li>\n<li>aws console has a cool switch role functionality which can be used for the above</li>\n<li>my understanding - since the aws iam admin can do anything, the management account’s iam admin can assume the OrganizationAccountAccessRole role of its member accounts</li>\n<li>“tag policies” - help standardize tags (name value key pairs)</li>\n<li>aws prep question - tag policies prevent non-compliant tags, to “detect” non-compliant tags, use aws config</li>\n<li>“cost allocation tags” - if activated, we can view costs grouped by these tags</li>\n</ul>\n<h3 id=\"scp\" style=\"position:relative;\"><a href=\"#scp\" aria-label=\"scp permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SCP</h3>\n<ul>\n<li>service control policies (scp) help restrict what aws accounts can do</li>\n<li>they are json documents which can be attached to organization root, organization units or individual aws accounts. <u>if we attach it to an organization root or organization unit, the scp affects all nested organization units and accounts inside it</u></li>\n<li><u>management account is never affected by any scp</u></li>\n<li><u>using scp, we also kind of limit what a root user of an account can do</u> - a root account can do everything that the account is allowed to do, and here, we are restricting what the account itself can do</li>\n<li>scp can be applied to specific regions, limit size of ec2 instances allowed to be spun up, etc</li>\n<li>we can use scp in <a href=\"https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scps_strategies.html\">two architectures</a> (feels just like iam i.e. explicit deny > explicit allow > implicit deny) -\n<ul>\n<li>allow list - block by default and allow specified services</li>\n<li>deny list - allow by default and block specified services</li>\n</ul>\n</li>\n<li>by default, the FullAWSAccess scp is attached to the organization root. this scp is basically <code class=\"language-text\">*</code> for resource and action. so, this way, everything is allowed in all accounts. now, we can explicitly deny some services on accounts using a deny list architecture</li>\n<li>for an allow list architecture, we first need to remove the FullAWSAccess scp attached by default and then, we can allow some services, and for the rest, the implicit default deny will kick in</li>\n<li>so for an identity to be able to make an api call, both the identity policy and the scp should allow it</li>\n</ul>\n<h3 id=\"control-tower\" style=\"position:relative;\"><a href=\"#control-tower\" aria-label=\"control tower permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Control Tower</h3>\n<ul>\n<li>quick and easy setup of multi account environments</li>\n<li>orchestrates cloudformation, iam, organizations, etc. underneath</li>\n<li>landing zone - the multi account environment. just like in aws organizations, we enable control tower from inside an account, and this account then becomes the management account. two organizational units are created as a part of this setup -\n<ul>\n<li>a foundational ou called security - this ou has two accounts\n<ul>\n<li>log account</li>\n<li>audit account</li>\n</ul>\n</li>\n<li>a custom ou called sandbox</li>\n</ul>\nwe can create more ous as a part of this landing zone as needed</li>\n<li>helps use identity federation. the product inside aws for this is aws sso (its newer name iam identity center). so, we can for e.g. use on prem microsoft active directory, which can be used by aws directory service, which finally can be used by iam identity center</li>\n<li>guard rails - rules for multi account governance. can be mandatory (always applied), strongly recommended or elective (for implementing niche requirements)\n<ul>\n<li>preventive - implemented using scp, stop us from performing actions in aws accounts. use case - ensure disallowing changes in bucket policies once configured</li>\n<li>detective - implemented using aws config, like a check which throws a warning if not implemented. use case - ensure best practices like enabling cloudtrail</li>\n</ul>\n</li>\n<li>account factory - automate creation and standardize setup of new accounts, e.g. can use cloudformation. tie provisioning / decommissioning of accounts to some existing sdlc</li>\n</ul>\n<h1 id=\"aws-secrets-manager\" style=\"position:relative;\"><a href=\"#aws-secrets-manager\" aria-label=\"aws secrets manager permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AWS Secrets Manager</h1>\n<ul>\n<li>confused with ssm (systems manager) parameter store which is also used for storing passwords</li>\n<li>supports automatic rotation of keys by invoking a lambda</li>\n<li>it integrates with other products like rds directly - i.e. rds authentication changes automatically as well</li>\n<li>application (think spring boot properties) can use sdk to retrieve credentials</li>\n<li>integrates with iam, kms</li>\n<li>aws prep question - if only used for application parameters, and not things like integration with rds for automatic rotation etc., aws systems manager parameter store is better since it is cost-effective</li>\n</ul>\n<h1 id=\"aws-waf\" style=\"position:relative;\"><a href=\"#aws-waf\" aria-label=\"aws waf permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AWS WAF</h1>\n<ul>\n<li>web application firewall</li>\n<li>“web acl” is associated with cloudfront distribution, alb, app sync, api gateway</li>\n<li>web acl allows or denies traffic</li>\n<li>allow / blcok traffic based on ip address, sql injection, country origin, etc</li>\n<li>we have “rule groups” inside these web acl. rule groups have “rules”</li>\n<li>it can send logs to s3, firehose, cloudwatch, etc. and from here we can use destinations of firehose / lambda, s3 events, etc. to perform analysis and use intelligence to update these rules</li>\n<li>these rules have a compute capacity called wcu or web acl capacity units, and the rule processing needs to use compute within this (do not confuse with dynamo db’s wcu)</li>\n<li>rule groups can be aws managed, partner managed, managed by us, or owned by services like aws shield</li>\n<li>rule parts - type, statement (match traffic), action (what to do in case of a match)</li>\n<li>rules can be “regular” (e.g. allow ssh from a certain ip range) or “rate based” (e.g. dos prevent)</li>\n<li>action - allow, block, count, captcha - (allow is not available for rate based, since we only usually want to prevent something when requests are above a certain rate)</li>\n<li>rules can add custom headers as well. the headers have a prefix of <code class=\"language-text\">x-amzn-waf</code></li>\n<li>now, since rules in a rule group are processed in order, rule 2 can use a header added by rule 1</li>\n<li>if action is allow or deny, processing stops. processing continues if the action of the rule is count or captcha. so, the above point of a rule using a custom header added by another rule is only possible if the rules proceeding it had an action of count or captcha</li>\n<li>if all rule inspections pass, we can specify a default action on the group as well</li>\n<li>use along with “aws shield”, which is used for ddos</li>\n<li>integrate with “aws firewall manager” for reuse of rule groups across accounts</li>\n</ul>\n<h1 id=\"aws-config\" style=\"position:relative;\"><a href=\"#aws-config\" aria-label=\"aws config permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AWS Config</h1>\n<ul>\n<li>record changes over time to configuration of aws services</li>\n<li>so, good for audit / helping check if resources are compliant with organization</li>\n<li>notifications via event bridge, sns, etc. on change</li>\n<li>it stores the changes in a s3 bucket</li>\n<li>we can have “config rules” - custom using lambda / aws managed. this way, our rules can return true or false, (compliant or non-compliant) and aws config can send non-compliant changes to sns, event bridge, etc</li>\n</ul>\n<h1 id=\"amazon-inspector\" style=\"position:relative;\"><a href=\"#amazon-inspector\" aria-label=\"amazon inspector permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Amazon Inspector</h1>\n<ul>\n<li>scans ec2 instances or containers for any vulnerabilities or variations from best practices</li>\n<li>for “network assessment”, an agent is not needed but for “host assessment”, an agent is needed</li>\n<li>cve (common vulnerabilities and exposures) are ids assigned for known vulnerabilities. inspector can scan for these cve ids on our applications as well</li>\n</ul>\n<h1 id=\"amazon-guard-duty\" style=\"position:relative;\"><a href=\"#amazon-guard-duty\" aria-label=\"amazon guard duty permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Amazon Guard Duty</h1>\n<ul>\n<li>identifies unexpected and unauthorized activity</li>\n<li>supports multiple accounts (master and member), so all activity is logged into master account</li>\n<li>can use vpc flow logs, dns logs, etc. and then after the intelligent analysis, send to cloudwatch event bridge. e.g. lambda can listen for these and automatically add / remove ip ranges too nacl etc</li>\n</ul>\n<h1 id=\"amazon-workdocs\" style=\"position:relative;\"><a href=\"#amazon-workdocs\" aria-label=\"amazon workdocs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Amazon WorkDocs</h1>\n<ul>\n<li>fully managed, secure content creation, storage, and collaboration service</li>\n<li>easily create, edit, and share content</li>\n</ul>","frontmatter":{"title":"AWS - Part I"}}},"pageContext":{"id":"a087f816-e845-5a94-975b-0a55dbf009bb"}},"staticQueryHashes":["1037383464","1617985380"]}