{"componentChunkName":"component---src-templates-blog-js","path":"/cucumber/","result":{"data":{"markdownRemark":{"fields":{"slug":"/cucumber/"},"id":"3531d90c-799a-554e-bb1f-ce6418ff5a79","html":"<h1 id=\"about\" style=\"position:relative;\"><a href=\"#about\" aria-label=\"about permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>About</h1>\n<ul>\n<li>cucumber helps us implement bdd patterns</li>\n<li>we write tests using scenarios</li>\n<li>scenarios are a list of steps</li>\n<li>we write scenarios in english like syntax called gherkin in .feature files</li>\n<li>step definitions help connect gherkin steps to executable code</li>\n</ul>\n<h1 id=\"different-approaches-of-testing\" style=\"position:relative;\"><a href=\"#different-approaches-of-testing\" aria-label=\"different approaches of testing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Different Approaches of Testing</h1>\n<ul>\n<li>tdd or test driven development is about white box testing, mostly done by developers themselves</li>\n<li>bdd or behavior driven development is about black box testing, po (product owners) and developers collaborate to develop bdd testcases. this is what cucumber helps achieve</li>\n<li>atdd or acceptance test driven development is about verifying the application via manual testing</li>\n</ul>\n<h1 id=\"considerations\" style=\"position:relative;\"><a href=\"#considerations\" aria-label=\"considerations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Considerations</h1>\n<ul>\n<li>features’ steps and step definitions should not be coupled, as coupling results in lack of re-usability</li>\n<li>instead, step definitions should be organized according to domains and not scenarios or features</li>\n<li>write atomic steps in order to prevent them from being specialized, as specialized steps are harder to reuse</li>\n<li>state shouldn’t be shared across scenarios, each test should start with a clean slate</li>\n</ul>\n<h1 id=\"step-definitions\" style=\"position:relative;\"><a href=\"#step-definitions\" aria-label=\"step definitions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step Definitions</h1>\n<ul>\n<li>it helps link gherkin steps to executable code</li>\n<li>to match it against steps, we can use both cucumber expressions and regular expressions</li>\n<li>step definitions can manage state by storing data in instance variables</li>\n<li>we can use step arguments to make step definitions reusable</li>\n<li>example -\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StepDefinitions</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation punctuation\">@Given</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I have {int} cukes in my belly\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">i_have_n_cukes_in_my_belly</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> cukes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cukes: %n\\n\"</span><span class=\"token punctuation\">,</span> cukes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\nor using java8 -\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StepDefinitions</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">En</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">StepDefinitions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Given</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I have {int} cukes in my belly\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> cukes<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cukes: %n\\n\"</span><span class=\"token punctuation\">,</span> cukes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n</ul>\n<h1 id=\"hooks\" style=\"position:relative;\"><a href=\"#hooks\" aria-label=\"hooks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hooks</h1>\n<ul>\n<li>hooks can be run at certain points in cucumber’s execution cycle</li>\n<li>note: for all examples below, there is a java8 lambda version as well</li>\n<li>we can execute hooks before the first step and after the last step of each scenario -\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Before</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doSomethingBefore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n</li>\n<li>we can execute hooks before and after every step -\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@BeforeStep</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doSomethingBeforeStep</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Scenario</span> scenario<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n</li>\n<li>we can execute hooks conditionally as well based on tags -\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@After</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@browser and not @headless\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doSomethingAfter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Scenario</span> scenario<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n</li>\n<li>global hooks run before any scenario has been run or after all scenarios have been run -\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@BeforeAll</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">beforeAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n</li>\n<li>we can specify an order while writing hooks, e.g. <code class=\"language-text\">@Before(order = 1)</code>. execution order is described as follows - <code class=\"language-text\">@Before(order = 1)</code> ➙ <code class=\"language-text\">@Before(order = 2)</code> ➙ <code class=\"language-text\">@After(order = 2)</code> ➙ <code class=\"language-text\">@After(order = 1)</code></li>\n</ul>\n<h1 id=\"tags\" style=\"position:relative;\"><a href=\"#tags\" aria-label=\"tags permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tags</h1>\n<ul>\n<li>tags help in running a subset of scenarios or hooks at a time</li>\n<li>they help in organizing scenarios and features</li>\n<li>we can have multiple tags as well</li>\n<li>feature files -\n<div class=\"gatsby-highlight\" data-language=\"gherkin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-gherkin line-numbers\"><code class=\"language-gherkin\"><span class=\"token tag\">@billing</span> <span class=\"token tag\">@bicker</span> <span class=\"token tag\">@annoy</span>\n<span class=\"token feature\"><span class=\"token keyword\">Feature:</span><span class=\"token important\"> Verify billing</span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n</li>\n<li>java files -\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@After</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@browser\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doSomethingAfter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Scenario</span> scenario<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n</li>\n<li><strong>tag expressions</strong>, e.g. - <code class=\"language-text\">(@smoke or @ui) and (not @slow)</code> can be used in hooks</li>\n<li>tags get inherited by child elements, e.g. scenarios inherit tags on features</li>\n<li>we can use <code class=\"language-text\">@IncludeTags</code> or <code class=\"language-text\">@ExcludeTags</code> on runners</li>\n<li>to run tests based on tag expressions, we can use - <code class=\"language-text\">./mvnw -Dcucumber.filter.tags=\"@smoke and not @slow\"</code></li>\n</ul>\n<h1 id=\"type-registry\" style=\"position:relative;\"><a href=\"#type-registry\" aria-label=\"type registry permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type Registry</h1>\n<ul>\n<li>parameter types help convert parameters to pojos easily</li>\n<li>like step definitions, they are a part of glue path</li>\n<li>below are a few examples of parameterization - data table type, using object mapper and parameter type</li>\n</ul>\n<h3 id=\"data-table-type\" style=\"position:relative;\"><a href=\"#data-table-type\" aria-label=\"data table type permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Data Table Type</h3>\n<ul>\n<li>feature file -\n<div class=\"gatsby-highlight\" data-language=\"gherkin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-gherkin line-numbers\"><code class=\"language-gherkin\"><span class=\"token scenario\"><span class=\"token keyword\">Scenario:</span><span class=\"token important\"> pass via data table type</span></span>\n  <span class=\"token atrule\">Given</span> data table type for following books<span class=\"token table-head\">\n    <span class=\"token punctuation\">|</span><span class=\"token th variable\"> name   </span><span class=\"token punctuation\">|</span><span class=\"token th variable\"> author   </span><span class=\"token punctuation\">|</span><span class=\"token th variable\"> price </span><span class=\"token punctuation\">|</span></span><span class=\"token table-body\">\n    <span class=\"token punctuation\">|</span><span class=\"token td string\"> book a </span><span class=\"token punctuation\">|</span><span class=\"token td string\"> author a </span><span class=\"token punctuation\">|</span><span class=\"token td string\"> 10    </span><span class=\"token punctuation\">|</span>\n    <span class=\"token punctuation\">|</span><span class=\"token td string\"> book b </span><span class=\"token punctuation\">|</span><span class=\"token td string\"> author b </span><span class=\"token punctuation\">|</span><span class=\"token td string\"> 20    </span><span class=\"token punctuation\">|</span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>step argument -\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@DataTableType</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Book</span> <span class=\"token function\">bookDataTableType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> bookDetails<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">(</span>\n      bookDetails<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      bookDetails<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"author\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>bookDetails<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"price\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>step -\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Given</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data table type for following books\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">dataTableTypeForFollowingBooks</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">></span></span> books<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n</li>\n</ul>\n<h3 id=\"object-mapper\" style=\"position:relative;\"><a href=\"#object-mapper\" aria-label=\"object mapper permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Object Mapper</h3>\n<ul>\n<li>the step argument can be replaced by the below and everything would work automatically\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@DefaultParameterTransformer</span>\n<span class=\"token annotation punctuation\">@DefaultDataTableEntryTransformer</span>\n<span class=\"token annotation punctuation\">@DefaultDataTableCellTransformer</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">transformer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> fromValue<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Type</span> toValueType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> objectMapper<span class=\"token punctuation\">.</span><span class=\"token function\">convertValue</span><span class=\"token punctuation\">(</span>fromValue<span class=\"token punctuation\">,</span> objectMapper<span class=\"token punctuation\">.</span><span class=\"token function\">constructType</span><span class=\"token punctuation\">(</span>toValueType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>my understanding - use data table type when column headers != pojo attribute names</li>\n</ul>\n<h3 id=\"parameter-type\" style=\"position:relative;\"><a href=\"#parameter-type\" aria-label=\"parameter type permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Parameter Type</h3>\n<ul>\n<li>feature file -\n<div class=\"gatsby-highlight\" data-language=\"gherkin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-gherkin line-numbers\"><code class=\"language-gherkin\"><span class=\"token scenario\"><span class=\"token keyword\">Scenario:</span><span class=\"token important\"> pass via parameter type</span></span>\n  <span class=\"token atrule\">Given</span> parameter type for book book a, author a, 10</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n</li>\n<li>step argument -\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ParameterType</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"book\"</span><span class=\"token punctuation\">,</span> value <span class=\"token operator\">=</span> <span class=\"token string\">\".*\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Book</span> <span class=\"token function\">bookParameterType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> bookDetails<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bookDetailsArray <span class=\"token operator\">=</span> bookDetails<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">(</span>\n      bookDetailsArray<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      bookDetailsArray<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>bookDetailsArray<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>step -\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Given</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"parameter type for book {book}\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">parameterTypeForBookBook</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Book</span> book<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n</li>\n</ul>\n<h1 id=\"keywords\" style=\"position:relative;\"><a href=\"#keywords\" aria-label=\"keywords permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Keywords</h1>\n<ul>\n<li>keywords can be primary or secondary</li>\n<li><strong>feature</strong> - it is used to group related scenarios. we can provide title and description. we can also add tags to it\n<div class=\"gatsby-highlight\" data-language=\"gherkin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-gherkin line-numbers\"><code class=\"language-gherkin\"><span class=\"token feature\"><span class=\"token keyword\">Feature:</span><span class=\"token important\"> guess the word</span>\n  a turn based game for two players\n</span>  <span class=\"token scenario\"><span class=\"token keyword\">Scenario:</span><span class=\"token important\"> ...</span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n</li>\n<li><strong>description</strong> - free form text which can get picked up by for e.g. html reporter plugin. we can place it with feature, background, scenario, etc. it supports markdown</li>\n<li><strong>steps</strong> - steps can start with given, when, then, and, but, etc. cucumber doesn’t consider keywords when looking for step definitions, so <code class=\"language-text\">Given: abcd</code> is the same as <code class=\"language-text\">When: abcd</code> when searching for a corresponding step definition irrespective of the annotation e.g. <code class=\"language-text\">@Given(...)</code> used on step definitions</li>\n<li><strong>given</strong> - putting the system into a known state</li>\n<li><strong>when</strong> - having more than one <code class=\"language-text\">when</code> step in a scenario is an anti-pattern</li>\n<li><strong>then</strong> - verifying observable output</li>\n<li><strong>and</strong> &#x26; <strong>but</strong> - instead of multiple given and then, we can join them using conjunctions\n<div class=\"gatsby-highlight\" data-language=\"gherkin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-gherkin line-numbers\"><code class=\"language-gherkin\"><span class=\"token scenario\"><span class=\"token keyword\">Scenario:</span><span class=\"token important\"> all done</span></span>\n  <span class=\"token atrule\">Given</span> i am out shopping\n  <span class=\"token atrule\">And</span> i have eggs\n  <span class=\"token atrule\">And</span> i have milk\n  <span class=\"token atrule\">When</span> i check my list\n  <span class=\"token atrule\">Then</span> i don't need anything\n  <span class=\"token atrule\">And</span> i get back home</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li><strong>*</strong> - we can also use asterisk to make scenarios more readable\n<div class=\"gatsby-highlight\" data-language=\"gherkin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-gherkin line-numbers\"><code class=\"language-gherkin\">  <span class=\"token scenario\"><span class=\"token keyword\">Scenario:</span><span class=\"token important\"> all done</span></span>\n  <span class=\"token atrule\">Given</span> i am out shopping\n  * i have eggs\n  * i have milk\n  ...</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li><strong>data table</strong> - useful for sending a list of values, passed as the last argument of the step definition. we can either receive it as a <code class=\"language-text\">List&lt;Map&lt;String, String>></code> or use type registry as described above for getting a list of pojos. cucumber automatically handles column headers and using it as keys in key value pairs\n<div class=\"gatsby-highlight\" data-language=\"gherkin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-gherkin line-numbers\"><code class=\"language-gherkin\">Given the following users exist:<span class=\"token table-head\">\n<span class=\"token punctuation\">|</span><span class=\"token th variable\"> name   </span><span class=\"token punctuation\">|</span><span class=\"token th variable\"> email              </span><span class=\"token punctuation\">|</span><span class=\"token th variable\"> twitter      </span><span class=\"token punctuation\">|</span></span><span class=\"token table-body\">\n<span class=\"token punctuation\">|</span><span class=\"token td string\"> Aslak  </span><span class=\"token punctuation\">|</span><span class=\"token td string\"> aslak@cucumber.io  </span><span class=\"token punctuation\">|</span><span class=\"token td string\"> @91aslak     </span><span class=\"token punctuation\">|</span>\n<span class=\"token punctuation\">|</span><span class=\"token td string\"> Julien </span><span class=\"token punctuation\">|</span><span class=\"token td string\"> julien@cucumber.io </span><span class=\"token punctuation\">|</span><span class=\"token td string\"> @julien_kt   </span><span class=\"token punctuation\">|</span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li><strong>background</strong> - instead of repeating givens in all scenarios in a feature, we can refactor the common setup. note: they are run after the before hooks\n<div class=\"gatsby-highlight\" data-language=\"gherkin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-gherkin line-numbers\"><code class=\"language-gherkin\"><span class=\"token feature\"><span class=\"token keyword\">Feature:</span><span class=\"token important\"> xyz</span>\n</span>  <span class=\"token scenario\"><span class=\"token keyword\">Background:</span><span class=\"token important\"></span></span>\n    <span class=\"token atrule\">Given</span> a\n    <span class=\"token atrule\">Given</span> b\n    <span class=\"token atrule\">Given</span> c\n  <span class=\"token scenario\"><span class=\"token keyword\">Scenario:</span><span class=\"token important\"> pqr</span></span>\n  ...\n  <span class=\"token scenario\"><span class=\"token keyword\">Scenario:</span><span class=\"token important\"> xyz</span></span>\n  ...</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li><strong>scenario outline</strong> - to run the same scenario multiple times with different values\n<div class=\"gatsby-highlight\" data-language=\"gherkin\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-gherkin line-numbers\"><code class=\"language-gherkin\"><span class=\"token feature\"><span class=\"token keyword\">Feature:</span><span class=\"token important\"> </span>\n</span>  <span class=\"token scenario\"><span class=\"token keyword\">Scenario Outline:</span><span class=\"token important\"></span></span>\n    <span class=\"token atrule\">Given</span> <span class=\"token outline variable\">&lt;a></span> and <span class=\"token outline variable\">&lt;b></span>\n    <span class=\"token atrule\">Then</span> sum is <span class=\"token outline variable\">&lt;c></span>\n    <span class=\"token scenario\"><span class=\"token keyword\">Examples:</span><span class=\"token important\"></span></span><span class=\"token table-head\">\n      <span class=\"token punctuation\">|</span><span class=\"token th variable\"> a </span><span class=\"token punctuation\">|</span><span class=\"token th variable\"> b </span><span class=\"token punctuation\">|</span><span class=\"token th variable\"> c  </span><span class=\"token punctuation\">|</span></span><span class=\"token table-body\">\n      <span class=\"token punctuation\">|</span><span class=\"token td string\"> 1 </span><span class=\"token punctuation\">|</span><span class=\"token td string\"> 2 </span><span class=\"token punctuation\">|</span><span class=\"token td string\"> 3  </span><span class=\"token punctuation\">|</span>\n      <span class=\"token punctuation\">|</span><span class=\"token td string\"> 6 </span><span class=\"token punctuation\">|</span><span class=\"token td string\"> 7 </span><span class=\"token punctuation\">|</span><span class=\"token td string\"> 13 </span><span class=\"token punctuation\">|</span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>these were primary keywords, secondary keywords include <code class=\"language-text\">@</code> for tags, <code class=\"language-text\">|</code> for data tables, <code class=\"language-text\">#</code> for comments, etc.</li>\n<li>we may need to use <code class=\"language-text\">\\</code> sometimes to escape stuff</li>\n</ul>","frontmatter":{"title":"Cucumber"}}},"pageContext":{"id":"3531d90c-799a-554e-bb1f-ce6418ff5a79"}},"staticQueryHashes":["1037383464","1617985380"]}