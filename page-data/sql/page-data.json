{"componentChunkName":"component---src-templates-blog-js","path":"/sql/","result":{"data":{"markdownRemark":{"fields":{"slug":"/sql/"},"id":"bab0ea4b-c947-5b3a-b84b-35bfc4d2afe5","html":"<h1 id=\"about\" style=\"position:relative;\"><a href=\"#about\" aria-label=\"about permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>About</h1>\n<p>SQL is a standard that has been adopted by various vendors for their implementations. the implementations include db2 by ibm, oracle rdbms by oracle, sql server by microsoft, postgresql and mysql which are opensource, etc. this blog is about mysql implementations of concepts, so things can be different for other distributions</p>\n<h1 id=\"architecture\" style=\"position:relative;\"><a href=\"#architecture\" aria-label=\"architecture permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Architecture</h1>\n<ul>\n<li>application / client layer - helps in client connections, authentication and authorization</li>\n<li>server layer - it parses, analyzes and optimizes queries. it also maintains cache and buffers. it makes an execution plan which gets fed into the storage engine layer</li>\n<li>storage engine layer - this layer actually writes and retrieves data from the underlying physical storage. mysql supports different storage engine layers like InnoDB, MyISAM, etc. which we can view by <code class=\"language-text\">show engines</code>. InnoDB is the default. e.g. the way transactions are carried out in them can be different</li>\n</ul>\n<h1 id=\"database-commands\" style=\"position:relative;\"><a href=\"#database-commands\" aria-label=\"database commands permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Database Commands</h1>\n<ul>\n<li><code class=\"language-text\">show databases</code> - list all the database. it would only show the databases that we are authorized to view</li>\n<li><code class=\"language-text\">use database_name</code> - selecting the database with name database_name. future queries would be performed on the selected database</li>\n<li><code class=\"language-text\">show create database mysql</code> - shows the command using which the database was created</li>\n<li><code class=\"language-text\">show tables</code> - display the tables in the current database</li>\n<li><code class=\"language-text\">create database if not exists movie_industry</code> - create the database if it doesn’t exist</li>\n<li><code class=\"language-text\">drop database if exists movie_industry</code> - drop the database if it exists</li>\n</ul>\n<h1 id=\"table-commands\" style=\"position:relative;\"><a href=\"#table-commands\" aria-label=\"table commands permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Table Commands</h1>\n<ul>\n<li>we have a lot of data types in mysql, look <a href=\"https://dev.mysql.com/doc/refman/8.0/en/data-types.html\">here</a>, categorized into numeric data types, date and time data types, string data types, spatial data types, json data type. e.g. numeric data type can have int, bigint, tinyint, decimal</li>\n<li><code class=\"language-text\">describe user</code> - describe the structure of a table</li>\n<li><code class=\"language-text\">show create table user</code> - shows the command using which the table was created</li>\n<li>we can provide a constraint for non-nullable fields using <code class=\"language-text\">not null</code></li>\n<li>we can provide a default value using <code class=\"language-text\">default</code></li>\n<li>we can automatically assign the next integer using <code class=\"language-text\">auto_increment</code>. auto increment has a few restrictions -\n<ul>\n<li>there can be only one column in a table marked as auto increment</li>\n<li>the auto increment column should be indexed</li>\n<li>the auto increment column cannot have a default value</li>\n</ul>\n</li>\n<li>create table example -\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> <span class=\"token keyword\">exists</span> actors <span class=\"token punctuation\">(</span>\n  id <span class=\"token keyword\">int</span> <span class=\"token keyword\">auto_increment</span><span class=\"token punctuation\">,</span>\n  first_name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span>\n  second_name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span>\n  dob <span class=\"token keyword\">date</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span>\n  gender <span class=\"token keyword\">enum</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"male\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"female\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"other\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span>\n  marital_status <span class=\"token keyword\">enum</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"married\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"divorced\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"single\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"unknown\"</span><span class=\"token punctuation\">,</span>\n  net_worth_in_millions <span class=\"token keyword\">decimal</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>we can use <code class=\"language-text\">default</code> while inserting data to instruct mysql to use the default value. it would work for auto increment id as well. we can also not specify the column name altogether</li>\n<li>insert into table by not specifying id -\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> actors <span class=\"token punctuation\">(</span>first_name<span class=\"token punctuation\">,</span> second_name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"jennifer\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"aniston\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n</li>\n<li>insert into table by specifying id which is auto increment -\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span>\n  actors <span class=\"token punctuation\">(</span>first_name<span class=\"token punctuation\">,</span> second_name<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">values</span>\n  <span class=\"token punctuation\">(</span><span class=\"token string\">\"jennifer\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"aniston\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token string\">\"johnny\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"depp\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>querying in tables by selecting all columns -\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> actors<span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n</li>\n<li>select specific columns and filter results using <code class=\"language-text\">where</code> clause -\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> first_name<span class=\"token punctuation\">,</span> second_name <span class=\"token keyword\">from</span> actors <span class=\"token keyword\">where</span> first_name <span class=\"token operator\">=</span> <span class=\"token string\">\"tom\"</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n</li>\n<li>we have a lot of operators in mysql, look <a href=\"https://dev.mysql.com/doc/refman/8.0/en/non-typed-operators.html\">here</a></li>\n<li>we can use the <code class=\"language-text\">like</code> operator with where clause for pattern matching. <code class=\"language-text\">_</code> can be used to match exactly one character, <code class=\"language-text\">%</code> can be used to match 0 or more characters -\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> actors <span class=\"token keyword\">where</span> first_name <span class=\"token operator\">like</span> <span class=\"token string\">'_enn%'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- matches jennifer</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n</li>\n<li>we can use <code class=\"language-text\">cast</code> to change data type</li>\n<li>e.g. order query results by number, but number would be treated as strings i.e. 2 > 10\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> actors <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> cast<span class=\"token punctuation\">(</span>age <span class=\"token keyword\">as</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n</li>\n<li>we can <code class=\"language-text\">limit</code> the number of results returned, and <code class=\"language-text\">offset</code> it from a certain point. note: sql will automatically handle even if our limit or offset goes beyond the number of rows by giving back sensible results\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> first_name <span class=\"token keyword\">from</span> actors <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> age <span class=\"token keyword\">desc</span> <span class=\"token keyword\">limit</span> <span class=\"token number\">4</span> <span class=\"token keyword\">offset</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n</li>\n<li>delete selective rows -\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">delete</span> <span class=\"token keyword\">from</span> actors <span class=\"token keyword\">where</span> gender <span class=\"token operator\">=</span> <span class=\"token string\">\"male\"</span> <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> age <span class=\"token keyword\">desc</span> <span class=\"token keyword\">limit</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n</li>\n<li>for deleting all rows, a faster method is <code class=\"language-text\">truncate actors</code>, it would delete the table entirely and recreate it</li>\n<li>update selective rows -\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">update</span> actors <span class=\"token keyword\">set</span> age <span class=\"token operator\">=</span> <span class=\"token number\">25</span> <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> first_name <span class=\"token keyword\">limit</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n</li>\n<li>we can alter name and data type of column, provide a default value. note: while altering data type, the new and old data types should be compatible -\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> actors change first_name firstName <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"anonymous\"</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n</li>\n<li>adding a column -\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> actors <span class=\"token keyword\">add</span> first_name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n</li>\n<li>deleting a column -\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> actors <span class=\"token keyword\">drop</span> first_name<span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n</li>\n<li>indices help in querying data efficiently, just like we search for words in a dictionary. downside is the overhead of creating, storing and maintaining these indices. internally, mysql uses b / b+ trees with the keys of the nodes as primary indices. this helps in efficient querying of data</li>\n<li>we can create an index on name to speed up queries -\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> actors <span class=\"token keyword\">add</span> <span class=\"token keyword\">index</span> index_name <span class=\"token punctuation\">(</span>first_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n</li>\n<li>we can also drop that created index -\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> actors <span class=\"token keyword\">drop</span> <span class=\"token keyword\">index</span> index_name<span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n</li>\n<li>alter table name -\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> actors <span class=\"token keyword\">rename</span> Actors<span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n</li>\n<li>delete table -\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">drop</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">if</span> <span class=\"token keyword\">exists</span> actors<span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n</li>\n<li>aliases can be used to give temporary names, as they help us write queries that are more readable\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">select</span>\n  t1<span class=\"token punctuation\">.</span>first_name <span class=\"token keyword\">as</span> a<span class=\"token punctuation\">,</span> t2<span class=\"token punctuation\">.</span>first_name <span class=\"token keyword\">as</span> b\n<span class=\"token keyword\">from</span>\n  actors <span class=\"token keyword\">as</span> t1<span class=\"token punctuation\">,</span> actors <span class=\"token keyword\">as</span> t2\n<span class=\"token keyword\">where</span>\n  t1<span class=\"token punctuation\">.</span>net_worth_in_millions <span class=\"token operator\">=</span> t2<span class=\"token punctuation\">.</span>net_worth_in_millions <span class=\"token operator\">and</span> t1<span class=\"token punctuation\">.</span>id <span class=\"token operator\">></span> t2<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>distinct is a post-processing filter i.e. works on the resulting rows of a query &#x26; can be used on multiple columns\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token keyword\">distinct</span> first_name<span class=\"token punctuation\">,</span> last_name <span class=\"token keyword\">from</span> actors<span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n</li>\n<li>aggregate methods like <code class=\"language-text\">min</code>, <code class=\"language-text\">max</code>, <code class=\"language-text\">sum</code>, <code class=\"language-text\">count</code> can be used -\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> actors<span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n</li>\n<li>group by - helps group rows based on a particular column. we cannot use columns <strong>not</strong> present in group by for select, having, or order by clauses\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> gender<span class=\"token punctuation\">,</span> <span class=\"token function\">avg</span><span class=\"token punctuation\">(</span>net_worth_in_millions<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> actors <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> gender<span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n</li>\n<li>while the where clause helps us filter rows, the having clause helps us filter groups\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">select</span>\n  marital_status<span class=\"token punctuation\">,</span> <span class=\"token function\">avg</span><span class=\"token punctuation\">(</span>net_worth_in_millions<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> avg_net_worth_in_millions\n<span class=\"token keyword\">from</span>\n  actors\n<span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span>\n  marital_status <span class=\"token keyword\">having</span> avg_net_worth_in_millions <span class=\"token operator\">></span> <span class=\"token number\">200</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>adding a foreign key constraint -\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> digital_assets\n<span class=\"token keyword\">add</span> <span class=\"token keyword\">constraint</span> digital_assets_actor\n<span class=\"token keyword\">foreign</span> <span class=\"token keyword\">key</span> <span class=\"token punctuation\">(</span>actor_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">references</span> actors<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n</li>\n</ul>\n<h1 id=\"joins\" style=\"position:relative;\"><a href=\"#joins\" aria-label=\"joins permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Joins</h1>\n<ul>\n<li><strong>cross join</strong> - cartesian product of the rows of the two tables</li>\n<li><strong>inner join</strong> - all rows of both the tables where the condition (called the join predicate) is satisfied</li>\n<li><strong>left outer join</strong> - result of inner join + all rows of the left table, with null for the columns of the right table</li>\n<li><strong>right outer join</strong> - result of inner join + all rows of the right table, with null for the columns of left table</li>\n<li><strong>full outer join</strong> - result of inner join + all rows of the left table, with null for the columns of the right table + all rows of the right table, with null for the columns of the left table</li>\n<li><strong>self join</strong> - using the same table on both sides of the join</li>\n<li>inner join example - assume digital_assets table contains social media links, where the asset_type is an enum containing twitter etc. and url is the link\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">select</span>\n  actors<span class=\"token punctuation\">.</span>first_name<span class=\"token punctuation\">,</span> actors<span class=\"token punctuation\">.</span>second_name<span class=\"token punctuation\">,</span> digital_assets<span class=\"token punctuation\">.</span>asset_type<span class=\"token punctuation\">,</span> digital_assets<span class=\"token punctuation\">.</span>url\n<span class=\"token keyword\">from</span>\n  actors <span class=\"token keyword\">inner</span> <span class=\"token keyword\">join</span> digital_assets\n<span class=\"token keyword\">on</span>\n  actors<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> digital_assets<span class=\"token punctuation\">.</span>actor_id<span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\nif the same column name is not there in the two tables, the “table.” prefix can be removed e.g. <code class=\"language-text\">first_name</code> in place of <code class=\"language-text\">actors.first_name</code>, though i prefer being explicit</li>\n<li>the above query can be rewritten as below, with <strong>no</strong> performance impact\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">select</span>\n  actors<span class=\"token punctuation\">.</span>first_name<span class=\"token punctuation\">,</span> actors<span class=\"token punctuation\">.</span>second_name<span class=\"token punctuation\">,</span> digital_assets<span class=\"token punctuation\">.</span>asset_type<span class=\"token punctuation\">,</span> digital_assets<span class=\"token punctuation\">.</span>url\n<span class=\"token keyword\">from</span>\n  actors<span class=\"token punctuation\">,</span> digital_assets\n<span class=\"token keyword\">where</span>\n  actors<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> digital_assets<span class=\"token punctuation\">.</span>actor_id<span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>union clause - merely clubs results together, doesn’t join the tables. e.g. the following query will display a list of all actress names, followed by all male actor names\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> concat<span class=\"token punctuation\">(</span>first_name<span class=\"token punctuation\">,</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> actors <span class=\"token keyword\">where</span> gender <span class=\"token operator\">=</span> <span class=\"token string\">'female'</span>\n<span class=\"token keyword\">union</span>\n<span class=\"token keyword\">select</span> concat<span class=\"token punctuation\">(</span>first_name<span class=\"token punctuation\">,</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> actors <span class=\"token keyword\">where</span> gender <span class=\"token operator\">=</span> <span class=\"token string\">'male'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\nnote: duplicates are automatically removed since it is a “union”, which can be prevented using <code class=\"language-text\">union all</code></li>\n<li>left outer join syntax (right join would have similar syntax, not discussed). e.g. in the below query, actors without social media handles would be displayed too, with the columns for <code class=\"language-text\">asset_type</code> and <code class=\"language-text\">url</code> holding null -\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">select</span>\n  actors<span class=\"token punctuation\">.</span>first_name<span class=\"token punctuation\">,</span> actors<span class=\"token punctuation\">.</span>second_name<span class=\"token punctuation\">,</span> digital_assets<span class=\"token punctuation\">.</span>asset_type<span class=\"token punctuation\">,</span> digital_assets<span class=\"token punctuation\">.</span>url\n<span class=\"token keyword\">from</span>\n  actors <span class=\"token keyword\">left</span> <span class=\"token keyword\">outer</span> <span class=\"token keyword\">join</span> digital_assets\n<span class=\"token keyword\">on</span>\n  actors<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> digital_assets<span class=\"token punctuation\">.</span>actor_id<span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>natural join - syntactic sugar, no need to explicitly specify the columns to use for join, i won’t use it</li>\n</ul>\n<h1 id=\"nested-queries\" style=\"position:relative;\"><a href=\"#nested-queries\" aria-label=\"nested queries permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Nested Queries</h1>\n<ul>\n<li>nested queries are slower but sometimes the only way to write a query</li>\n<li>the following is an example of <strong>nested scalar query</strong>, since the nested query returns a single value. e.g. find all actors who had updated their digital assets most recently\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">select</span>\n  first_name\n<span class=\"token keyword\">from</span>\n  actors <span class=\"token keyword\">inner</span> <span class=\"token keyword\">join</span> digital_assets <span class=\"token keyword\">on</span> digital_assets<span class=\"token punctuation\">.</span>actor_id <span class=\"token operator\">=</span> actors<span class=\"token punctuation\">.</span>id\n<span class=\"token keyword\">where</span>\n  digital_assets<span class=\"token punctuation\">.</span>last_updated <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">select</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>digital_assets<span class=\"token punctuation\">.</span>last_updated<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> digital_assets\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>e.g. find all actors who are on facebook\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> actors <span class=\"token keyword\">where</span> id <span class=\"token operator\">in</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">select</span> actor_id <span class=\"token keyword\">from</span> digital_assets <span class=\"token keyword\">where</span> asset_type <span class=\"token operator\">=</span> <span class=\"token string\">'facebook'</span>\n<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>e.g. find actors who updated their social handles on their birthday\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">select</span>\n  actors<span class=\"token punctuation\">.</span>first_name\n<span class=\"token keyword\">from</span>\n  actors <span class=\"token keyword\">inner</span> <span class=\"token keyword\">join</span> digital_assets\n<span class=\"token keyword\">on</span>\n  actors<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> digital_assets<span class=\"token punctuation\">.</span>actor_id <span class=\"token operator\">and</span>\n  actors<span class=\"token punctuation\">.</span>dob <span class=\"token operator\">=</span> digital_assets<span class=\"token punctuation\">.</span>last_updated</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>the following is an example of a nested query where it returns a collection of columns. the query returns the same results as the example as above\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> first_name <span class=\"token keyword\">from</span> actors <span class=\"token keyword\">where</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> dob<span class=\"token punctuation\">)</span> <span class=\"token operator\">in</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> actor_id<span class=\"token punctuation\">,</span> last_updated <span class=\"token keyword\">from</span> digital_assets<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n</li>\n</ul>\n<h1 id=\"correlated-queries\" style=\"position:relative;\"><a href=\"#correlated-queries\" aria-label=\"correlated queries permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Correlated Queries</h1>\n<ul>\n<li>the subquery references columns from the main query</li>\n<li>note: we can use the <code class=\"language-text\">exists</code> operator to check if the subquery returns any rows</li>\n<li>e.g. find actors with their names in their twitter handles -\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">select</span>\n  actors<span class=\"token punctuation\">.</span>first_name\n<span class=\"token keyword\">from</span>\n  actors <span class=\"token keyword\">inner</span> <span class=\"token keyword\">join</span> digital_assets\n<span class=\"token keyword\">on</span>\n  actors<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> digital_assets<span class=\"token punctuation\">.</span>actor_id\n<span class=\"token keyword\">where</span>\n  digital_assets<span class=\"token punctuation\">.</span>url <span class=\"token operator\">like</span> concat<span class=\"token punctuation\">(</span><span class=\"token string\">'%'</span><span class=\"token punctuation\">,</span> actors<span class=\"token punctuation\">.</span>first_name<span class=\"token punctuation\">,</span> <span class=\"token string\">'%'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">and</span>\n  digital_assets<span class=\"token punctuation\">.</span>asset_type <span class=\"token operator\">=</span> <span class=\"token string\">'twitter'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>the query returns the same results as the example as above\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> first_name <span class=\"token keyword\">from</span> actors <span class=\"token keyword\">where</span> <span class=\"token keyword\">exists</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">select</span>\n    <span class=\"token operator\">*</span>\n  <span class=\"token keyword\">from</span>\n    digital_assets\n  <span class=\"token keyword\">where</span>\n    digital_assets<span class=\"token punctuation\">.</span>actor_id <span class=\"token operator\">=</span> actors<span class=\"token punctuation\">.</span>id <span class=\"token operator\">and</span>\n    digital_assets<span class=\"token punctuation\">.</span>url <span class=\"token operator\">like</span> concat<span class=\"token punctuation\">(</span><span class=\"token string\">'%'</span><span class=\"token punctuation\">,</span> actors<span class=\"token punctuation\">.</span>first_name<span class=\"token punctuation\">,</span> <span class=\"token string\">'%'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">and</span>\n    digital_assets<span class=\"token punctuation\">.</span>asset_type <span class=\"token operator\">=</span> <span class=\"token string\">'twitter'</span>\n<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>difference between nested queries and correlated queries - in nested queries, the subquery runs first and then the main query runs. in correlated queries, the subquery runs for every row of the main query, and the subquery runs after the main query</li>\n</ul>\n<h1 id=\"multi-table-operations\" style=\"position:relative;\"><a href=\"#multi-table-operations\" aria-label=\"multi table operations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Multi Table Operations</h1>\n<ul>\n<li>multi table delete use case - delete related data from multiple tables\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">delete</span>\n  actors<span class=\"token punctuation\">,</span> digital_assets <span class=\"token comment\">-- tables to delete rows from</span>\n<span class=\"token keyword\">from</span>\n  actors<span class=\"token punctuation\">,</span> digital_assets\n<span class=\"token keyword\">where</span>\n  actors<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> digital_assets<span class=\"token punctuation\">.</span>actor_id <span class=\"token operator\">and</span>\n  digital_assets<span class=\"token punctuation\">.</span>asset_type <span class=\"token operator\">=</span> <span class=\"token string\">'twitter'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\nwe mention the tables to delete rows from, note how this isn’t required when deleting from one table</li>\n<li>we can similarly have multi table updates -\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">update</span>\n  actors <span class=\"token keyword\">inner</span> <span class=\"token keyword\">join</span> digital_assets\n<span class=\"token keyword\">on</span>\n  actors<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> digital_assets<span class=\"token punctuation\">.</span>actor_id\n<span class=\"token keyword\">set</span>\n  actors<span class=\"token punctuation\">.</span>first_name <span class=\"token operator\">=</span> upper<span class=\"token punctuation\">(</span>actors<span class=\"token punctuation\">.</span>first_name<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">where</span>\n  digital_assets<span class=\"token punctuation\">.</span>asset_type <span class=\"token operator\">=</span> <span class=\"token string\">'facebook'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>note: a subquery cannot have select for tables being updated or deleted in the outer query</li>\n<li>copy a table <strong>without the data</strong> and just the structure - <code class=\"language-text\">create table copy_of_actors like actors</code></li>\n<li>insert data from one table into another - <code class=\"language-text\">insert into copy_of_actors(name) select first_name from actors</code></li>\n</ul>\n<h1 id=\"views\" style=\"position:relative;\"><a href=\"#views\" aria-label=\"views permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Views</h1>\n<ul>\n<li>views can be created by combining multiple tables</li>\n<li>we can filter out rows and columns</li>\n<li>now, a complex query becomes a simple single table query</li>\n<li>we can create views from other views as well, and we can perform the same joins and filtering on views that we would otherwise perform on a table</li>\n<li>when we do <code class=\"language-text\">show tables</code>, we see the views as well, we can see the type of table i.e. whether it is a normal table (also referred to as base table) or a view by using the command <code class=\"language-text\">show full tables</code></li>\n<li>e.g. of creating a view -\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">view</span> actors_twitter_accounts <span class=\"token keyword\">as</span>\n  <span class=\"token keyword\">select</span>\n    first_name<span class=\"token punctuation\">,</span> second_name<span class=\"token punctuation\">,</span> url\n  <span class=\"token keyword\">from</span>\n    actors <span class=\"token keyword\">inner</span> <span class=\"token keyword\">join</span> digital_assets  \n  <span class=\"token keyword\">on</span>\n    actors<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> digitalassets<span class=\"token punctuation\">.</span>actor_id\n  <span class=\"token keyword\">where</span>\n    asset_type <span class=\"token operator\">=</span> <span class=\"token string\">'twitter'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>views are basically like stored queries, so they get updated whenever the tables get updated</li>\n<li>we can use <code class=\"language-text\">create or replace</code> to either create a view or replace it if one already exists. e.g. for single actors\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> <span class=\"token operator\">or</span> <span class=\"token keyword\">replace</span> <span class=\"token keyword\">view</span> single_actors <span class=\"token keyword\">as</span>\n  <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> actors <span class=\"token keyword\">where</span> marital_status <span class=\"token operator\">=</span> <span class=\"token string\">'single'</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n</li>\n<li>we can update or delete rows from the underlying base tables using views. however, there are conditions e.g. it shouldn’t have specific types of joins, group by statements or aggregation functions, etc.\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> single_actors\n  <span class=\"token punctuation\">(</span>first_name<span class=\"token punctuation\">,</span> second_name<span class=\"token punctuation\">,</span> dob<span class=\"token punctuation\">,</span> gender<span class=\"token punctuation\">,</span> marital_status<span class=\"token punctuation\">,</span> net_worth_in_millions<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">values</span>\n  <span class=\"token punctuation\">(</span><span class=\"token string\">'charlize'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'theron'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1975-08-07'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'female'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'single'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">130</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>e.g. i try inserting a row into this view, which fails the filtering clause used to create the view\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> single_actors\n  <span class=\"token punctuation\">(</span>first_name<span class=\"token punctuation\">,</span> second_name<span class=\"token punctuation\">,</span> dob<span class=\"token punctuation\">,</span> gender<span class=\"token punctuation\">,</span> marital_status<span class=\"token punctuation\">,</span> net_worth_in_millions<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">values</span>\n  <span class=\"token punctuation\">(</span><span class=\"token string\">'tom'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hanks'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1956-07-09'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'male'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'married'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">350</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>now, since views can update their base tables, this went through and updated the table. however, since the view’s query filters out married actors, we don’t see the row in the view. we have essentially updated a row in a table through a view which will not be visible in the view. if this behavior is not desirable, we can use the check option while creating the view\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> <span class=\"token operator\">or</span> <span class=\"token keyword\">replace</span> <span class=\"token keyword\">view</span> single_actors\n  <span class=\"token keyword\">as</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> actors <span class=\"token keyword\">where</span> marital_status <span class=\"token operator\">=</span> <span class=\"token string\">'single'</span>\n<span class=\"token keyword\">with</span> <span class=\"token keyword\">check</span> <span class=\"token keyword\">option</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>now the insert statement for tom hanks will fail</li>\n<li>if we create views using other views, the check option can have scopes of <strong>local</strong> and <strong>cascade</strong>. local means that only the check option of the view in being used for the update will be considered, while cascade looks at the check option of the views being used by this view itself as well</li>\n<li>we can drop views using <code class=\"language-text\">drop view single_actors</code></li>\n</ul>\n<h1 id=\"stored-procedures\" style=\"position:relative;\"><a href=\"#stored-procedures\" aria-label=\"stored procedures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Stored Procedures</h1>\n<ul>\n<li>it is like a program, with loops, conditions etc</li>\n<li>it can reduce the traffic between our applications and databases, as instead of making repeated calls to the database, the procedure can be called</li>\n<li>procedures can have granular security so that we can give access to procedures and not the underlying tables</li>\n<li>disadvantage is the code logic being scattered everywhere, making it difficult to debug and maintain</li>\n<li>when we call a procedure, the code gets compiled and stored in cache which gets used for future calls</li>\n<li>we can have multiple lines in a procedure, so we can have multiple <code class=\"language-text\">;</code></li>\n<li>for the entire procedure to be parsed as a single statement, we change the delimiter to something else</li>\n<li>example of creating a procedure -\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">delimiter</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>\n<span class=\"token keyword\">create</span> <span class=\"token keyword\">procedure</span> show_actors<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">begin</span>\n  <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> actors<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">end</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>\n<span class=\"token keyword\">delimiter</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>call a procedure - <code class=\"language-text\">call show_actors()</code></li>\n<li>see details about procedure - <code class=\"language-text\">show procedure status where db = 'movie_industry'</code></li>\n<li><em>if we don’t filter using the database name, there can be a lot of output</em></li>\n<li>delete a procedure - <code class=\"language-text\">delete procedure if exists show_actors</code></li>\n<li>using variables in procedures example -\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">delimiter</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>\n<span class=\"token keyword\">create</span> <span class=\"token keyword\">procedure</span> summary<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">begin</span>  \n  <span class=\"token keyword\">declare</span> count_m<span class=\"token punctuation\">,</span> count_f <span class=\"token keyword\">int</span> <span class=\"token keyword\">default</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">select</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">into</span> count_m <span class=\"token keyword\">from</span> actors <span class=\"token keyword\">where</span> gender <span class=\"token operator\">=</span> <span class=\"token string\">'male'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">select</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">into</span> count_f <span class=\"token keyword\">from</span> actors <span class=\"token keyword\">where</span> gender <span class=\"token operator\">=</span> <span class=\"token string\">'female'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">select</span> count_m<span class=\"token punctuation\">,</span> count_f<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">end</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>\n<span class=\"token keyword\">delimiter</span> <span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>we can also hardcode variables in procedures, e.g. <code class=\"language-text\">set count_m = 12</code></li>\n<li>we can have parameters in procedures. they can be in three modes - <strong>in</strong>, <strong>out</strong> and <strong>inout</strong></li>\n<li>in parameters are passed as input to the procedure. they cannot be modified since a copy of these parameters are used by the procedures</li>\n<li>out parameters are initially null when the procedure starts. procedures can modify them and after the procedure completes, users can get the value of these parameters</li>\n<li>inout parameters can function as both in and out</li>\n<li>example of parameters -\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">delimiter</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>\n<span class=\"token keyword\">create</span> <span class=\"token keyword\">procedure</span> net_worth_greater_than<span class=\"token punctuation\">(</span><span class=\"token operator\">in</span> base_net_worth <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> actor_count <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">begin</span>\n  <span class=\"token keyword\">select</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">into</span> actor_count <span class=\"token keyword\">from</span> actors\n  <span class=\"token keyword\">where</span> net_worth_in_millions <span class=\"token operator\">>=</span> base_net_worth\n<span class=\"token keyword\">end</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>\n<span class=\"token keyword\">delimiter</span> <span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>usage of parameters -\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">call</span> net_worth_greater_than<span class=\"token punctuation\">(</span><span class=\"token number\">750</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">@actor_count</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">select</span> <span class=\"token variable\">@actor_count</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n</li>\n<li>variables starting with @ are also called session variables. they are defined by users and only exist until the end of current session. they are not visible in other sessions</li>\n<li>we can use if statements in procedures as well</li>\n<li>conditions can evaluate to true, false or null in sql. in both false and null we skip the block</li>\n<li>an example - note: the elseif and else blocks are optional\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">delimiter</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>\n<span class=\"token keyword\">create</span> <span class=\"token keyword\">procedure</span> relationship_status<span class=\"token punctuation\">(</span><span class=\"token operator\">in</span> in_id <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> out_status <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">begin</span>\n  <span class=\"token keyword\">declare</span> queried_status <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">select</span> marital_status <span class=\"token keyword\">into</span> queried_status <span class=\"token keyword\">from</span> actors <span class=\"token keyword\">where</span> id <span class=\"token operator\">=</span> in_id<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> queried_status <span class=\"token operator\">like</span> <span class=\"token string\">'married'</span> <span class=\"token keyword\">then</span> <span class=\"token keyword\">set</span> out_status <span class=\"token operator\">=</span> <span class=\"token string\">'actor is married'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">elseif</span> queried_status <span class=\"token operator\">like</span> <span class=\"token string\">'single'</span> <span class=\"token keyword\">then</span> <span class=\"token keyword\">set</span> out_status <span class=\"token operator\">=</span> <span class=\"token string\">'actor is single'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">else</span> <span class=\"token keyword\">set</span> out_status <span class=\"token operator\">=</span> <span class=\"token string\">'status is unknown'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">end</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">end</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>\n<span class=\"token keyword\">delimiter</span> <span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\nwe can make calls to the procedure using -\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">call</span> relationship_status<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">@val</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">select</span> <span class=\"token variable\">@val</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n</li>\n<li>we can also have case statements (not discussed)</li>\n<li>iterative statements - we can have both while style loops and do-while style loops</li>\n<li>syntax for while -\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">label: while condition do\nstatements\nend while label;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>syntax for do while -\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">label: repeat\nstatements\nuntil condition\nend repeat label;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>example -\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">drop</span> <span class=\"token keyword\">procedure</span> <span class=\"token keyword\">if</span> <span class=\"token keyword\">exists</span> print_male_actors<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">delimiter</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>\n<span class=\"token keyword\">create</span> <span class=\"token keyword\">procedure</span> print_male_actors<span class=\"token punctuation\">(</span><span class=\"token keyword\">out</span> str <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">begin</span>\n  <span class=\"token keyword\">declare</span> f_name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">declare</span> total_rows <span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">declare</span> current_row <span class=\"token keyword\">int</span> <span class=\"token keyword\">default</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">declare</span> gen <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">set</span> str <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">select</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">into</span> total_rows <span class=\"token keyword\">from</span> actors<span class=\"token punctuation\">;</span>\n  print_loop: <span class=\"token keyword\">while</span> current_row <span class=\"token operator\">&lt;=</span> total_rows <span class=\"token keyword\">do</span>\n\n    <span class=\"token keyword\">select</span> gender<span class=\"token punctuation\">,</span> first_name <span class=\"token keyword\">into</span> gen<span class=\"token punctuation\">,</span> f_name <span class=\"token keyword\">from</span> actors <span class=\"token keyword\">where</span> id <span class=\"token operator\">=</span> current_row<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> gen <span class=\"token operator\">like</span> <span class=\"token string\">'male'</span> <span class=\"token keyword\">then</span>\n      <span class=\"token keyword\">if</span> str <span class=\"token operator\">=</span> <span class=\"token string\">''</span> <span class=\"token keyword\">then</span> <span class=\"token keyword\">set</span> str <span class=\"token operator\">=</span> f_name<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">else</span> <span class=\"token keyword\">set</span> str <span class=\"token operator\">=</span> concat<span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token string\">', '</span><span class=\"token punctuation\">,</span> f_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">end</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">end</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">set</span> current_row <span class=\"token operator\">=</span> current_row <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">end</span> <span class=\"token keyword\">while</span> print_loop<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">end</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>\n<span class=\"token keyword\">delimiter</span> <span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">call</span> print_male_actors<span class=\"token punctuation\">(</span><span class=\"token variable\">@val</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">select</span> <span class=\"token variable\">@val</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>the <code class=\"language-text\">leave</code> keyword can be used to exit a label. this label can be on the procedure itself, loops, etc.</li>\n<li>cursors in databases can be used to iterate over the table rows one by one</li>\n<li>cursors are <strong>read only</strong> i.e. cannot be used to update data</li>\n<li>cursors are <strong>non-scrollable</strong> i.e. we can only read in an ordered way and not skip rows</li>\n<li>cursors are <strong>asensitive</strong> i.e. they point to the actual data in the database. we can also have <strong>insensitive</strong> cursors, not supported by mysql, where a copy of the table is created. disadvantage of asensitive is that it would reflect the ad hoc updates in the database</li>\n<li><strong>if the cursor cannot move to the next row, an error can be raised.</strong> so we use the <code class=\"language-text\">declare continue handler</code></li>\n<li>e.g. -\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">drop</span> <span class=\"token keyword\">procedure</span> <span class=\"token keyword\">if</span> <span class=\"token keyword\">exists</span> print_male_actors<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">delimiter</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>\n<span class=\"token keyword\">create</span> <span class=\"token keyword\">procedure</span> print_male_actors<span class=\"token punctuation\">(</span><span class=\"token keyword\">out</span> str <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">begin</span>\n  <span class=\"token keyword\">declare</span> f_name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">declare</span> last_row_fetched <span class=\"token keyword\">int</span> <span class=\"token keyword\">default</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n\n  <span class=\"token keyword\">declare</span> it <span class=\"token keyword\">cursor</span> <span class=\"token keyword\">for</span>\n    <span class=\"token keyword\">select</span> first_name <span class=\"token keyword\">from</span> actors <span class=\"token keyword\">where</span> gender <span class=\"token operator\">=</span> <span class=\"token string\">'male'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">declare</span> <span class=\"token keyword\">continue</span> <span class=\"token keyword\">handler</span> <span class=\"token keyword\">for</span> <span class=\"token operator\">not</span> found <span class=\"token keyword\">set</span> last_row_fetched <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">set</span> str <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">open</span> it<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">fetch</span> it <span class=\"token keyword\">into</span> f_name<span class=\"token punctuation\">;</span>\n  print_loop: <span class=\"token keyword\">while</span> last_row_fetched <span class=\"token operator\">!=</span> <span class=\"token number\">1</span> <span class=\"token keyword\">do</span>\n    <span class=\"token keyword\">if</span> str <span class=\"token operator\">=</span> <span class=\"token string\">''</span> <span class=\"token keyword\">then</span> <span class=\"token keyword\">set</span> str <span class=\"token operator\">=</span> f_name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">set</span> str <span class=\"token operator\">=</span> concat<span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token string\">', '</span><span class=\"token punctuation\">,</span> f_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">end</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">fetch</span> it <span class=\"token keyword\">into</span> f_name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">end</span> <span class=\"token keyword\">while</span> print_loop<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">close</span> it<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">end</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>\n<span class=\"token keyword\">delimiter</span> <span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">call</span> print_male_actors<span class=\"token punctuation\">(</span><span class=\"token variable\">@val</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">select</span> <span class=\"token variable\">@val</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>error handling is necessary to avoid abnormal termination of stored procedures</li>\n<li>error handler in mysql has three parts - <strong>error condition</strong>, <strong>action</strong> and <strong>statements</strong></li>\n<li>error condition can be one of the three types -\n<ul>\n<li>mysql error code - error codes specific to mysql</li>\n<li>sqlstate code - error codes in ansi sql</li>\n<li>user defined named condition - to make the code more readable, we can define a name for the above two using syntax - <code class=\"language-text\">declare custom_condition_name condition for (mysql error code | sqlstate code)</code></li>\n</ul>\n</li>\n<li>statements are a set of executable lines of code like setting of variables etc. if we have multiple statements, we can enclose them within a <code class=\"language-text\">begin</code> and <code class=\"language-text\">end</code> block</li>\n<li>action can be to continue / exit the block or stored procedure, which is taken after executing the statements</li>\n<li>syntax -\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">declare (continue | exit) handler\nfor (mysql error code | sqlstate code | user defined named condition)\nbegin\n  statement 1;\n  statement 2;\n  ...\nend;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>we also have stored functions. it is used to store common formulas / expressions and gets evaluated at runtime unlike stored procedures which are compiled. stored functions have not been discussed here</li>\n</ul>\n<h1 id=\"triggers\" style=\"position:relative;\"><a href=\"#triggers\" aria-label=\"triggers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Triggers</h1>\n<ul>\n<li>triggers are statements that get invoked when we perform an operation like insert, update or delete</li>\n<li>note: if we perform an operation like truncate which is equivalent to delete, triggers won’t be invoked</li>\n<li>triggers can be <strong>row level</strong> or <strong>statement level</strong></li>\n<li>row level triggers are invoked once per row, e.g. if a statement updated 25 rows then it gets invoked 25 times, while statement level triggers are invoked once per statement</li>\n<li>triggers can be invoked at 6 phases - (before, after) * (insert, update, delete)</li>\n<li>e.g. of trigger -\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">delimiter</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>\n<span class=\"token keyword\">create</span> <span class=\"token keyword\">trigger</span> net_worth_check\nbefore <span class=\"token keyword\">insert</span> <span class=\"token keyword\">on</span> actors\n<span class=\"token keyword\">for each row</span>\n  <span class=\"token keyword\">if</span> new<span class=\"token punctuation\">.</span>net_worth_in_millions <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">or</span> new<span class=\"token punctuation\">.</span>net_worth_in_millions <span class=\"token operator\">is</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">then</span>\n  <span class=\"token keyword\">set</span> new<span class=\"token punctuation\">.</span>net_worth_in_millions <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">end</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">*</span><span class=\"token operator\">*</span>\n<span class=\"token keyword\">delimiter</span> <span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> actors <span class=\"token punctuation\">(</span>first_name<span class=\"token punctuation\">,</span>  net_worth_in_millions<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'tom'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">350</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> actors <span class=\"token punctuation\">(</span>first_name<span class=\"token punctuation\">,</span> net_worth_in_millions<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'young'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> actors <span class=\"token punctuation\">(</span>first_name<span class=\"token punctuation\">,</span>  net_worth_in_millions<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'old'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">540</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> actors<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- actors young and old will have net_worth_in_millions adjusted to 0</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>show triggers - <code class=\"language-text\">show triggers;</code></li>\n<li>drop triggers - <code class=\"language-text\">drop trigger if exists net_worth_check;</code></li>\n<li>we can also include multiple statements by enclosing statements after <code class=\"language-text\">for each row</code> inside a begin-end block</li>\n</ul>\n<h1 id=\"transactions\" style=\"position:relative;\"><a href=\"#transactions\" aria-label=\"transactions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Transactions</h1>\n<ul>\n<li>we use transactions since we want either all the statements or none of them to go through</li>\n<li>there can be storage engines which don’t support transactions / apply locking using different methods</li>\n<li>irrespective of whether transactions are supported, databases should have some form of locking to disallow concurrent access from modifying the data. e.g. InnoDB supports row level locking so that multiple users can modify the data in the same table. this also makes it a little slower</li>\n<li>we can start and commit a transaction using -\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">start</span> <span class=\"token keyword\">transaction</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- statements</span>\n<span class=\"token keyword\">commit</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>we can roll back a transaction using\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-sql line-numbers\"><code class=\"language-sql\"><span class=\"token keyword\">start</span> <span class=\"token keyword\">transaction</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- statements</span>\n<span class=\"token keyword\">rollback</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n</li>\n</ul>","frontmatter":{"title":"SQL"}}},"pageContext":{"id":"bab0ea4b-c947-5b3a-b84b-35bfc4d2afe5"}},"staticQueryHashes":["1037383464","1617985380"]}