{"componentChunkName":"component---src-templates-blog-js","path":"/aws-part-ii/","result":{"data":{"markdownRemark":{"fields":{"slug":"/aws-part-ii/"},"id":"5db1a216-47f4-5200-9c3c-f903731cbec9","html":"<h1 id=\"default-vpc\" style=\"position:relative;\"><a href=\"#default-vpc\" aria-label=\"default vpc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Default VPC</h1>\n<ul>\n<li>used to create a private network in aws</li>\n<li>vpcs are region resilient</li>\n<li>a default vpc per region is created for us, but we can create custom vpc as well</li>\n<li>a vpc has a cidr block, and everything inside that vpc gets allocated addresses from that cidr block</li>\n<li>custom vpcs can have multiple cidr blocks</li>\n<li>cidr block of default vpc is 172.31.0.0/16</li>\n<li>allowed block size in vpc is between a /16 and /28</li>\n<li>a vpc can be divided into subnets</li>\n<li>a subnet is present inside an az</li>\n<li>the default vpc has one subnet in every az</li>\n<li>cidr blocks of subnets cannot overlap with each other</li>\n<li>/20 is the subnet size for the default vpc. so, we can have 16 subnets in the default vpc</li>\n<li>there can only be one default vpc per region</li>\n<li>the default vpc can be deleted and recreated, and is not customizable</li>\n<li>the default vpc comes with an igw, an sg and a nacl</li>\n<li>anything inside the default vpc subnets gets a public addresses, since the subnets inside the default vpc are configured to provide a public address</li>\n</ul>\n<h1 id=\"vpc\" style=\"position:relative;\"><a href=\"#vpc\" aria-label=\"vpc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>VPC</h1>\n<ul>\n<li>a vpc can have multiple cidr blocks, but should be carefully decided -\n<ul>\n<li>size of vpc - determines how many services can be run inside it, since they use these ip addresses</li>\n<li>handling overlapping cidr ranges can be difficult, so avoid them</li>\n<li>the vpc would be ideally broken down into tiers - web, db, etc</li>\n</ul>\n</li>\n<li>vpc is regionally resilient</li>\n<li>when creating a vpc, we can choose default or dedicated tenancy. if we choose default, we can configure tenancy to be dedicated on a per-resource basis. however, if we choose tenancy as dedicated at the vpc level, this cannot be customized</li>\n<li>the primary cidr block, specified at the time of vpc creation. it can range from /16 to /28</li>\n<li>we can have secondary cidr blocks for the vpc as well</li>\n<li>we can also assign a block of /56 ipv6 addresses to a vpc. my understanding - since there is no concept of nat etc. in ipv6 etc., we have to use ipv6 addresses assigned by aws or ipv6 addresses we own</li>\n<li>vpcs use route53 for dns, which is available at vpc cidr + 2</li>\n<li>some dns related options in a vpc -\n<ul>\n<li>enable dns hostnames - whether instances with public ip addresses will be assigned a dns name - this was disabled by default for me</li>\n<li>enable dns support - whether dns resolution via vpc cidr + 2 can be used - enabled by default</li>\n</ul>\n</li>\n<li>vpc have a dhcp options set, which helps assign ip address, dns servers, etc. to our compute devices. a vpc can only have one dhcp options set at a time</li>\n</ul>\n<h1 id=\"subnets\" style=\"position:relative;\"><a href=\"#subnets\" aria-label=\"subnets permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Subnets</h1>\n<ul>\n<li>subnets are az resilient - so if an az fails, the subnets and all resources inside only that subnet fail</li>\n<li>a subnet is in one az, but one az can have multiple subnets</li>\n<li>a subnet is allocated an ipv4 cidr block from the vpc’s ipv4 cidr block</li>\n<li>a subnet is allocated a /64 ipv6 cidr block from the vpc’s ipv6 cidr block</li>\n<li>my understanding - ipv6 is optional, not ipv4 for vpc / subnets</li>\n<li>subnets of a vpc can communicate with each other</li>\n<li>following 5 ip addresses in the subnet cidr blocks cannot be used -\n<ul>\n<li>first address - it is network address</li>\n<li>network + 1 - used by the vpc router. the vpc router has an interface in each subnet</li>\n<li>network + 2 - used by dns. while only vpc cidr + 2 is used by route53 (not the cidr of all subnets + 2), still aws reserves this for all subnets</li>\n<li>network + 3 - reserved by aws for future use</li>\n<li>broadcast address (last address of the network)</li>\n</ul>\n</li>\n<li>some ip related options in a subnet -\n<ul>\n<li>auto assign public ipv4 address - checking this helps make a subnet public from private</li>\n<li>auto assign ipv6 - i think we check this regardless of public or private, no such concept is there in ipv6</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"vpc-router-and-route-tables\" style=\"position:relative;\"><a href=\"#vpc-router-and-route-tables\" aria-label=\"vpc router and route tables permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>VPC Router and Route Tables</h1>\n<ul>\n<li>vpc router is something used by aws internally</li>\n<li>has an interface in every subnet at the network + 1 address</li>\n<li>route tables configure how the vpc router handles traffic from a subnet</li>\n<li>by default, a vpc is created with a main route table. if we don’t explicitly associate a subnet with a route table, it uses this route table</li>\n<li>a subnet can only be associated with one route table at a time</li>\n<li>the route table has some fields, two of them being destination and target. destination is the ip address in the packet from the subnet, target is the location, e.g. local means same vpc</li>\n<li>more specific a route is (based on network part of the ip address), higher its priority is</li>\n<li>all route tables will have 1 or 2 routes with target as local - the ipv4, and optionally ipv6 based on our configuration. these routes are not affected by the rule of specificity above</li>\n</ul>\n<h1 id=\"internet-gateway\" style=\"position:relative;\"><a href=\"#internet-gateway\" aria-label=\"internet gateway permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Internet Gateway</h1>\n<ul>\n<li>regionally resilient</li>\n<li>managed service - aws handles performance etc</li>\n<li>a vpc can have 0 or 1 igw, and an igw can be attached to 0 or 1 vpc</li>\n<li>igw runs from the aws public zone</li>\n</ul>\n<h3 id=\"outgoing-traffic-flow\" style=\"position:relative;\"><a href=\"#outgoing-traffic-flow\" aria-label=\"outgoing traffic flow permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Outgoing Traffic Flow</h3>\n<p>when an ec2 for e.g. has a public ip address, bts, a record is created in igw. the vpc router knows with the help of the destination ip address in the outgoing packets and the route table to route it to igw. the igw then overwrites the private source ip address with the public one</p>\n<h3 id=\"incoming-traffic-flow\" style=\"position:relative;\"><a href=\"#incoming-traffic-flow\" aria-label=\"incoming traffic flow permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Incoming Traffic Flow</h3>\n<p>incoming packets reach the igw (since technically the public addresses belong to igw?). then, it overwrites the destination ip address by the private version of the ec2 and finally the vpc router forwards it back to ec2</p>\n<h1 id=\"steps-of-making-a-subnet-public\" style=\"position:relative;\"><a href=\"#steps-of-making-a-subnet-public\" aria-label=\"steps of making a subnet public permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Steps of Making a Subnet Public</h1>\n<ul>\n<li>create an igw</li>\n<li>attach it to a vpc</li>\n<li>create a custom route table</li>\n<li>associate it with the subnet to be made public</li>\n<li>add a catch-all route with target to the igw and destination 0.0.0.0/0</li>\n<li>optionally, add a second route with target to igw and destination ::/0</li>\n<li>enable auto assign public ipv4 address on the subnet to be made public</li>\n</ul>\n<h1 id=\"stateful-and-stateless-applications\" style=\"position:relative;\"><a href=\"#stateful-and-stateless-applications\" aria-label=\"stateful and stateless applications permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Stateful and Stateless Applications</h1>\n<ul>\n<li>stateless - views request and responses individually</li>\n<li>so we need to allow inbound and allow outbound separately</li>\n<li>remember outbound can be both request and response, same with inbound</li>\n<li>also, while request is always on a well known port (<a href=\"the-tcp-ip-model/#ports\">system or registered</a>), response is on an ephemeral port</li>\n</ul>\n<h1 id=\"nacl\" style=\"position:relative;\"><a href=\"#nacl\" aria-label=\"nacl permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>NACL</h1>\n<ul>\n<li>network access control lists</li>\n<li>associate with subnets - every subnet has a nacl</li>\n<li>so, nacl will come into play only when traffic crosses the subnet in question</li>\n<li>rules in nacl are grouped into inbound and outbound (recall both can be either request or response)</li>\n<li>rules can be both allow or deny</li>\n<li>priority - the lowest priority rule is applied first (* is like the catch-all)</li>\n<li>what the nacl by default looks like (this is for both inbound and outbound, the only difference is the column name - source for outbound and destination for inbound)</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Rule Number</th>\n<th>Type</th>\n<th>Protocol</th>\n<th>Port Range</th>\n<th>Source / Destination</th>\n<th>Allow / Deny</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>100</td>\n<td>All  traffic</td>\n<td>All</td>\n<td>All</td>\n<td>0.0.0.0/0</td>\n<td>Allow</td>\n</tr>\n<tr>\n<td>101</td>\n<td>All  traffic</td>\n<td>All</td>\n<td>All</td>\n<td>::/0</td>\n<td>Allow</td>\n</tr>\n<tr>\n<td>*</td>\n<td>All  traffic</td>\n<td>All</td>\n<td>All</td>\n<td>0.0.0.0/0</td>\n<td>Deny</td>\n</tr>\n<tr>\n<td>*</td>\n<td>All  traffic</td>\n<td>All</td>\n<td>All</td>\n<td>::/0</td>\n<td>Deny</td>\n</tr>\n</tbody>\n</table>\n<br />\n<ul>\n<li>so, default is allow everything for both inbound and outbound (the * rule’s effect is nullified)</li>\n<li>nacl is stateless</li>\n<li>assume we get rid of the rules 100 and 101 for below</li>\n<li>e.g. we have a web server. it can receive requests at port 443 from anywhere. so, we need to have -\n<ul>\n<li>an inbound rule - source ip 0.0.0.0/0, port 443</li>\n<li>an outbound rule - destination ip 0.0.0.0/0, port - ephemeral port range</li>\n</ul>\n</li>\n<li>e.g. the web server needs software updates. this time, our server has become the client. so, it would need the opposite of the rules above e.g. ephemeral port range from anywhere as allow</li>\n<li>unlike the default nacl, when we create a custom nacl, the only rule they have is * to deny all</li>\n<li>apart from statelessness, two disadvantages of nacl -\n<ul>\n<li>nacl cannot be used to reference logical resources like security groups - only cidr, ports and protocols</li>\n<li>nacls do not apply to individual logical resources, only at subnet level</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"security-groups\" style=\"position:relative;\"><a href=\"#security-groups\" aria-label=\"security groups permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Security Groups</h1>\n<ul>\n<li>security groups are stateful - so, if we allow the reqeust traffic (be it inbound or be it outbound), its corresponding response traffic is allowed automatically</li>\n<li>security groups do not have an explicit deny</li>\n<li>there is an implicit deny, so we either allow, or we do not</li>\n<li>so, if we want to allow everything but a specific ip range - we cannot. so, we can use nacls in this case</li>\n<li>security groups work at application layer, so they support referencing logical resources (security groups)</li>\n<li>extension of above - self referencing i.e. two instances having the same security group attached to them can talk to each other if the security groups has an allow rule for itself</li>\n<li>security groups are attached to enis (elastic network interfaces) - so, when we attach an sg to an ec2, we actually attach the sg to the primary eni of ec2</li>\n<li>default security group - i think this was created when i created a vpc (the default vpc has a default sg too). it has an allow rule for all traffic by default</li>\n</ul>\n<h1 id=\"nat\" style=\"position:relative;\"><a href=\"#nat\" aria-label=\"nat permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>NAT</h1>\n<ul>\n<li>network address translation</li>\n<li>igw does static nat (i.e. one private ip to one public ip) for both incoming and outgoing packets</li>\n<li>ip masquerading - that is what people call nat usually - a block of private cidr sitting behind one public ip</li>\n<li>private route tables have a catch-all route which sends traffic to nat gateway</li>\n<li>nat gateway needs to be able to uniquely identify the instances that talk to it due to the route above (e.g. there can be multiple ec2 instances each initiating requests to multiple servers via the nat). the nat identifies them individually via a translation table that it maintains</li>\n<li>it would overwrite the source ip in the packet with its own private ip</li>\n<li>now, the igw has a mapping of nat’s private and public ips, and so it again overwrites the source ip in the packet with the nat’s public ip address</li>\n<li>so, the nat gateway does ip masquerading - multiple private ips represented by a single private ip</li>\n<li>so, the nat gateway needs to be in a <a href=\"#steps-of-making-a-subnet-public\">public subnet</a> to work</li>\n<li>nat gateways use elastic ip addresses (static ip addresses)</li>\n<li>nat gateways are az resilient</li>\n<li>initially, we used bastion hosts i.e. jump boxes</li>\n<li>if using ec2, we need to disable the source destination checks - by default, ec2 will drop packets where the source / destination is not the ec2’s ip itself. this would not be the case if it functions as a nat</li>\n<li>use ec2 for nat if cost, some very performance specific needs, configuring ssh, etc. is needed</li>\n<li>nat is not needed for ipv6 - igw can work directly with ipv6</li>\n<li>use egress only internet gateway if we want only outgoing, and not bidirectional access for ipv6</li>\n</ul>\n<h1 id=\"route53\" style=\"position:relative;\"><a href=\"#route53\" aria-label=\"route53 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Route53</h1>\n<ul>\n<li>route53 can act as a domain registrar and a dns service</li>\n<li>it is a global service i.e. the data is replicated across regions for resiliency</li>\n<li>there are four authoritative name servers allocated to us</li>\n<li>zone files i.e. the dns database we maintain is called a hosted zone in aws, since they are hosted on the four name servers that are allocated to us</li>\n<li>hosted zone can be public (accessible from internet) or private (only from inside our vpc)</li>\n<li>for a private hosted zone, we have to associate the hosted zone with the vpcs of our choice</li>\n<li>my understanding - for queries from inside vpcs for private hosted zones, we don’t go through the process of resolution i.e. contacting root name servers, tld name servers, etc., we directly get back the correct records</li>\n<li>also, because of the above, with private hosted zones we do not have to own the domain?</li>\n<li>we can use aws only as a domain registrar or a dns service. we can create a domain inside route53, and point it to authoritative name servers outside. we can also create a hosted zone inside route53, and point the domain created outside aws to the name servers of this hosted zone</li>\n<li>cname vs alias - cname cannot work with apex / naked domains, i.e. we have to add a subdomain. issue - some aws services, e.g. elb do not give an ip address, they only give a domain name. so, we cannot use a record (no ip) or even c name record (apex domain). so, we can use alias records, which can point to an aws resource. alias records are free of cost. we can have an “a record alias” or a “c record alias”. the type to use depends on what we point at, e.g. when pointing to an elb, the elb dns is actually resolves to an ip, which is essentially an “a record”. so, we need to use an “a record alias”. so, for pointing to things like cloudfront distribution, api gateway, elb, etc. use an alias record with type a or aaaa</li>\n<li>health checks - while they are used by records, they exist separately. performed by health checkers globally. 30s (default) or 10s. checks can be either tcp, http or https with correct status code or string matching for response body. we can send notifications to sns for failed health checks as well. if 18% or more of health checkers report healthy, the health check overall is healthy. the checks can be -\n<ul>\n<li>endpoint checks</li>\n<li>cloudwatch alarms - i think idea is cloudwatch alarms react to ec2 os checks, and these health checks can then influence routing policies</li>\n<li>calculated checks (based on other checks)</li>\n</ul>\n</li>\n<li>simple routing policy - e.g. we use a record with simple routing policy. for one subdomain, we can return multiple ip addresses. they are all returned to the client, which then chooses of them. limitation of simple routing policy - only routing policy where no health checks are used</li>\n<li>failover routing policy - if primary record is healthy, it is returned. otherwise, the secondary record is returned. e.g. primary is ec2 and secondary is out of band s3. this is also called <u>active passive failover</u>. note - basically, we create two records here with the same subdomain. one of them is of type failover and under that primary and the other of type failover and under that secondary. in this case, primary can be the elastic ip of ec2, and the secondary can be alias to s3 bucket (remember the <a href=\"kms-and-s3#s3-static-web-hosting\">limitation around bucket names</a>). remember how we create multiple records, each with a routing policy type, a type (a, cname, etc). “a record” itself can be of types like point to an ip, point to an aws resource (alias record) and so on\n<ul>\n<li>aws prep question - if a solution wants to withstand region failure, wants all its resources to be available all the time, then we should use an active-active failover, using for e.g. weighted routing policy to help balance traffic across multiple regions</li>\n</ul>\n</li>\n<li>multi value routing - we create multiple records with the same name. each of them can be associated with ip addresses. out of all these, 8 healthy ones are returned at random</li>\n<li>weighted routing policy - e.g. three a records for a subdomain. we assign a weight to each record. the percentage of times a record is returned is its weight / sum of all weights. if the chosen record is deemed to be unhealthy, the next record in the queue is returned. health checks do not influence the weight calculation, its just that unhealthy records are not returned</li>\n<li>latency based routing - for a subdomain, we can have one record in each aws region. when the user makes a request, it will know the closest record for them based on their ip address, and return it accordingly</li>\n<li>geolocation routing policy - similar to latency, but location of users are used to influence the record, and not the latency between the user location and aws region. so for e.g., we could redirect queries from europe to an alb in frankfurt. records can be tagged with an iso country code, iso continent codes, american states or default. the user is returned the most specific record <u>if it applies to them</u> (american state > country > continent > default) or no result at all. if it applies to them - a canadian will not get an indian record because of proximity here unlike in latency based routing</li>\n<li>geo proximity routing policy - we can tag resources with a region, or coordinates like latitude and longitude. we define a bias for them as well, and based on the bias, the correct record is returned</li>\n</ul>\n<h1 id=\"acm\" style=\"position:relative;\"><a href=\"#acm\" aria-label=\"acm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ACM</h1>\n<ul>\n<li>acm - amazon certificate manager</li>\n<li>can work as a public or private ca (certificate authority). note - if using private ca, our computers / browsers need to be configured to trust the private cas. this is used inside large organizations</li>\n<li>acm can be used to generate or import certificates. acm can automatically renew certificates it generates (so if we import certificates into acm, we need to handle renewal)</li>\n<li>services like alb, cloudfront, etc. can be used with acm</li>\n<li>acm is regional - so for an alb in us-east-2, the acm certificate should be in us-east-2 as well. note - for global service like cloudfront, acm certificates needs to be in us-east-1. this looks similar to <a href=\"aws-basics,cloudwatch-and-iam#cloudtrail\">cloudtrail</a>?</li>\n</ul>\n<h1 id=\"cloudfront\" style=\"position:relative;\"><a href=\"#cloudfront\" aria-label=\"cloudfront permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cloudfront</h1>\n<ul>\n<li>origin - location of content - can be s3 or a custom origin. (custom origin should have a public ip address)</li>\n<li>distribution - what we use to configure cloudfront</li>\n<li>distributions have behaviors, where configurations like origins, ttl, etc. are made. behaviors have path. the default behavior on a distribution has a path of <code class=\"language-text\">*</code></li>\n<li>edge locations - content is cached here. they are more widely distributed and smaller than aws regions. they are mostly used for storage</li>\n<li>regional edge cache - bigger than edge locations but smaller than regions. for content that is relatively infrequent but still can benefit from being closer to customers</li>\n<li>the idea is when content is asked for from an edge location for the first time -\n<ul>\n<li>the edge location checks its own cache</li>\n<li>if it is a cache hit, return. else go to the regional edge location</li>\n<li>now the regional edge location checks its own cache</li>\n<li>if a cache hit return. else go to the origin of the distribution</li>\n</ul>\n</li>\n<li>cloudfront works with acm for https</li>\n<li>cloudfront is for read only (and not write operations)</li>\n<li>cloudfront distributions have 3 price classes - we can use all edge locations, or some like europe</li>\n<li>ttl - the objects are expired and after this and a new fetch to the origin is made\n<ul>\n<li>default is 24 hrs</li>\n<li>this is defined at the behavior level (like most configurations)</li>\n<li>we can specify ttl at the object level. if none is specified, the ttl specified at the behavior level is used</li>\n<li>we can also specify a maximum and a minimum value for the ttl at the behavior level. the idea is that the objects cannot use ttls beyond these bounds</li>\n<li>the headers used can be <code class=\"language-text\">Cache-Control max-age</code> or <code class=\"language-text\">Cache-Control s-maxage</code> (specified in seconds) or <code class=\"language-text\">Expires</code> (specified in date time format)</li>\n</ul>\n</li>\n<li>invalidations -\n<ul>\n<li>performed on a distribution (not behavior, but we can specify an invalidation pattern)</li>\n<li>note - takes time to propagate</li>\n<li>expires all objects based on the invalidation pattern we specify regardless of the ttl they have</li>\n</ul>\n</li>\n<li>ssl - we can configure to allow both http and https, redirect http to https or only allow https</li>\n<li>if using the auto generated cloudfront domain, we automatically get https. bts, the ssl certificate is for *.cloudfront.net, which is why we can use https. recall we do not have https with s3’s auto generated domain</li>\n<li>for custom domain\n<ul>\n<li>we create an alias record to the cloudfront distribution (with simple routing policy maybe)</li>\n<li>we specify this fqdn in the cloudfront distribution</li>\n<li>we add the acm certificate to the cloudfront distribution</li>\n</ul>\n</li>\n<li>note - with sni, one web server is allowed to host multiple https websites (i.e. handle multiple certificates). but, sni might not be supported by older clients, in which case we need a dedicated ip address, which can be enabled in cloudfront at a higher cost</li>\n<li>for both between client and cloudfront (called viewer protocol) and cloudfront and origin (called origin protocol), we need publicly signed certificates i.e. self-signed certificates will not work. note - s3 to cloudfront the origin protocol certificate is not needed</li>\n<li>origin types - can be s3, some media related aws services or custom origins. note - s3 static website hosting with cloudfront is a custom origin</li>\n<li>when using s3, viewer protocol and origin protocol is the same, but when using for e.g. custom origin, we can configure the origin protocol to be http, https or the same as viewer protocol</li>\n<li>using oac or origin access control (newer) and oai or origin access identity (older) only cloudfront can access s3 (not using static website hosting, s3 with static website hosting is a custom origin). basically, the idea is s3 bucket policy can have for e.g. an implicit deny for everything except the oai, which is attached to the distribution. so, objects can only be accessed via the cloudfront distribution</li>\n<li>since origin access control isn’t available for custom origins, we can use the cloudfront feature to add custom headers i.e. cloudfront adds header <code class=\"language-text\">x: xyz</code>, and the custom origin can expect this header to be present in the request, else throw an error. my understanding - to add to this, the ip addresses of cloudfront is known beforehand for e.g. from <a href=\"https://ip-ranges.amazonaws.com/ip-ranges.json\">here</a>. we can configure custom origins to reject traffic unless it is from these ips</li>\n<li>public vs private - public is where cloudfront can be accessed directly by anyone, while in private, cloudfront needs to be accessed via a signed url or a signed cookie. i think this is also configurable at a behavior level</li>\n<li>old way - a cloudfront key had to be created and managed by the root user. then, the account had to be added as a <u>trusted signer</u>. in the new method, <u>trusted key groups</u> are used</li>\n<li>signed url - provide access to one object. use if client doesn’t support cookies. signed cookie - provide access to multiple objects. preserves the url</li>\n<li>cloudfront supports failover, where it can switch to secondary origin if primary origin fails</li>\n<li>cloudfront response headers policy - which headers to include / exclude from origin</li>\n<li>aws prep question - cloudfront behaviors can be configured to handle for e.g. image formats for different clients differently based on the user-agent header</li>\n</ul>\n<h1 id=\"aws-global-accelerator\" style=\"position:relative;\"><a href=\"#aws-global-accelerator\" aria-label=\"aws global accelerator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AWS Global Accelerator</h1>\n<ul>\n<li>anycast ip addresses are used by global accelerators at edge locations</li>\n<li>this way, the traffic from global accelerator to regions goes via aws global network</li>\n<li>it does not do caching of data like cloudfront, it helps with quicker transfer of data</li>\n</ul>\n<h1 id=\"vpc-flow-logs\" style=\"position:relative;\"><a href=\"#vpc-flow-logs\" aria-label=\"vpc flow logs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>VPC Flow Logs</h1>\n<ul>\n<li>only capture packet metadata like source and destination ips and not content of the packet</li>\n<li>for capturing content as well, we might need to install a packet sniffer on the ec2</li>\n<li>can be applied at -\n<ul>\n<li>vpc level (monitors all enis in the vpc)</li>\n<li>subnet level (monitors all enis in the subnet)</li>\n<li>eni level</li>\n</ul>\n</li>\n<li>not realtime i.e. there is a delay between actual traffic vs showing up in vpc flow logs</li>\n<li>destination can be s3 (and then use maybe athena for querying) or cloudwatch</li>\n<li>flow logs can capture “accepted”, “rejected” or “all” packets</li>\n<li>communications to 169.254.169.254, dhcp server, dns server, etc. are not logged</li>\n</ul>\n<h1 id=\"egress-only-internet-gateway\" style=\"position:relative;\"><a href=\"#egress-only-internet-gateway\" aria-label=\"egress only internet gateway permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Egress Only Internet Gateway</h1>\n<ul>\n<li>all ipv6 addresses are publicly routable i.e. allow both inbound and outbound unlike ipv4</li>\n<li>egress only internet gateway allows only outbound traffic only for ipv6</li>\n<li>just like normal igw it is region resilient</li>\n<li>just like igw we attach it to the vpc</li>\n<li>default route of ::/0 should be added to the route table with target as the egress only igw</li>\n</ul>\n<h1 id=\"gateway-endpoints\" style=\"position:relative;\"><a href=\"#gateway-endpoints\" aria-label=\"gateway endpoints permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gateway Endpoints</h1>\n<ul>\n<li>gateway endpoint - allow a private resource inside vpc to access s3 or dynamodb</li>\n<li>since s3 and dynamodb are aws public services, so we either need public ipv4, ipv6 or nat gateway</li>\n<li>we can get around this problem using gateway endpoints - we don’t need a nat etc. for this</li>\n<li>gateway endpoints are created per service per region, so it is region resilient - when creating the gateway endpoint, <u>we select the vpc</u> inside which we want to create it</li>\n<li>then, <u>we also select the route tables</u> inside which we want to make an entry - a route is added in the route tables for this endpoint automatically for us</li>\n<li>the “endpoint policy” attached to gateway endpoints allow us to control for e.g. what s3 buckets can be accessed using this particular gateway endpoint</li>\n<li>we can also configure the bucket policy to only accept connections from the gateway endpoint</li>\n<li>note - recall how in route tables inside the destination column, we specify an ip address range. in this case, when we select the route tables for which the endpoint should be added, aws creates a route where the destination is a prefix list id representing the aws service we choose when creating the endpoint interface. this cannot be edited by us</li>\n<li>aws prep question - unlike interface endpoints, have no associated cost</li>\n</ul>\n<h1 id=\"interface-endpoints\" style=\"position:relative;\"><a href=\"#interface-endpoints\" aria-label=\"interface endpoints permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Interface Endpoints</h1>\n<ul>\n<li>like gateway endpoints, they provide access to public aws services from private resources</li>\n<li>historically, everything except s3 and dynamodb, but recently even s3 is supported</li>\n<li>they are an eni, so not highly available, since they are scoped to a subnet</li>\n<li>we can use security groups to control access since they are an eni</li>\n<li>we can also use endpoint policy apart from security groups</li>\n<li>only support tcp and ipv4</li>\n<li>use private link bts. private link helps inject aws or 3rd party services into a vpc</li>\n<li>recall how in gateway endpoint we select the vpc and route tables. well in this case, we select the vpc and subnets, because it is implemented using an eni</li>\n<li>unlike in gateway endpoint where a route table entry is made, here the private resources need to start using the dns name of the interface endpoint</li>\n<li>there is a regional dns which is vpc wide or zonal dns for each subnet\n<ul>\n<li>regional dns example - vpce-06530b58da6055f4f-51ysge5i.sns.us-east-1.vpce.amazonaws.com</li>\n<li>az dns example - vpce-06530b58da6055f4f-51ysge5i-us-east-1b.sns.us-east-1.vpce.amazonaws.com</li>\n</ul>\n</li>\n<li><u>private dns</u> - enabled by default, but we can disable it. if enabled, a private hosted zone is created for our vpc. this replaces the default service dns endpoint with the endpoint’s dns. this way, we can continue using the original dns endpoint of the service with no application changes</li>\n<li>so, this way, even for e.g. a public ec2, which would have anyway gone via the igw to interact with for e.g. sns since it has a public address, it would now use the private dns configuration to go via the interface endpoint</li>\n</ul>\n<h1 id=\"vpc-peering\" style=\"position:relative;\"><a href=\"#vpc-peering\" aria-label=\"vpc peering permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>VPC Peering</h1>\n<ul>\n<li>private network link between two vpcs</li>\n<li>can be same / cross region and same / cross account</li>\n<li>we can also enable an option which allows public dns hostnames in the other vpc to the private ip addresses. recall how this automatically happens for dns resolution in the same vpc i.e. public dns hostname resolves to private ip address if in same vpc and of course public ipv4 if in a different vpc</li>\n<li>if in the same region, we can use the sg referencing</li>\n<li>the connection is not transitive - if vpc a is peered to vpc b, and vpc b is peered to vpc c, this does not indicate that vpc a is automatically peered with vpc c</li>\n<li>to configure this, a route needs to be added on both sides, where the destination is the private range of the other vpc while the target is the peering connection</li>\n<li>this is why we should not have overlapping cidrs - overlapping cidrs are not allowed in vpc peering</li>\n</ul>\n<h1 id=\"site-to-site-vpn\" style=\"position:relative;\"><a href=\"#site-to-site-vpn\" aria-label=\"site to site vpn permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Site to Site VPN</h1>\n<ul>\n<li>logical connection between a vpc and on premise encrypted using ip sec, running over the public internet</li>\n<li>quicker to provision unlike direct connect</li>\n<li>vgw - virtual private gateway (inside aws) and cgw - customer gateway (inside our on prem)</li>\n<li>vgw is highly available by design just like igw</li>\n<li>we create a vpn connection between vgw and cgw</li>\n<li>for a highly available solution\n<ul>\n<li>have 2 connections between a vgw and cgw (note - 2 is maximum, we cannot have 3?)</li>\n<li>use multiple cgws, and so have connections between the vgw and these multiple cgws</li>\n</ul>\n</li>\n<li>static vs dynamic vpn - with static vpn, we have to configure ip ranges etc. statically. with dynamic vpn, we do not have to do this. dynamic vpn uses border gateway protocol. additionally, “route propagation” helps populate the route tables automatically with the correct routes for the vpn connection</li>\n<li>there is a speed limit of 1.25 gbps (on aws side) - since it uses public internet at the end of the day, it can have performance bottlenecks depending on our use case</li>\n<li>can be used as a backup of the dx / an alternate while dx is being setup</li>\n<li>ecmp (equal cost multi path) routing - scale beyond the 1.25gbps limit when using transit gateway. using this, we can use multiple vpn tunnels</li>\n</ul>\n<h1 id=\"direct-connect\" style=\"position:relative;\"><a href=\"#direct-connect\" aria-label=\"direct connect permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Direct Connect</h1>\n<ul>\n<li>dx or direct connect - a physical connection between aws region and on prem</li>\n<li>1gbps, 10gbps or 100gbps</li>\n<li>traffic goes from on prem -> dx location -> aws</li>\n<li>the dx location has two cages - one for us and one for aws</li>\n<li>the aws cage has the aws dx router and our cage has our dx router</li>\n<li>the cage that belongs to us can be managed by an aws partner or us</li>\n<li>a physical connection called “cross connect” between these two cages is established</li>\n<li>resiliency - aws is connected to multiple dx locations, and we need not worry about it. so, for high resiliency -\n<ul>\n<li>have multiple “cross connect” connections in the same dx location - so multiple aws dx routers and our dx routers connected with each other</li>\n<li>have connections to multiple dx locations</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"transit-gateway\" style=\"position:relative;\"><a href=\"#transit-gateway\" aria-label=\"transit gateway permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Transit Gateway</h1>\n<ul>\n<li>network transit hubs to connect on prem to vpc by reducing complexity</li>\n<li>“attachments” to connect to vpc, site to site vpn and direct connect</li>\n<li>without transit gateway, we would need -\n<ul>\n<li>nC2 vpc peering connections if we have n vpcs</li>\n<li>for resilient vpn connections, we would for e.g. have m cgws and 2 connections between each vpc and cgw, therefore n * m * 2 = 2mn vpn connections</li>\n</ul>\n</li>\n<li>with transit gateway, each cgw and vpc terminates at the transit gateway. so 2 * m = 2m connections for cgws, and n connections from vpc to the transit gateway</li>\n<li>if using direct connect(s), the direct connects only need to terminate at the transit gateway</li>\n<li>thus, based on above analysis, it supports transitive routing i.e. unlike in vpc peering where we need a full mesh topology of nC2 connections, here we just have to establish connection between vpc and the transit gateway. if vpc a is connected to the transit gateway and so is vpc b, they both are connected to each other</li>\n<li>we can also “peer transit gateways” with one another</li>\n<li>share between accounts using aws ram (resource access manager)</li>\n</ul>\n<h1 id=\"storage-gateway\" style=\"position:relative;\"><a href=\"#storage-gateway\" aria-label=\"storage gateway permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Storage Gateway</h1>\n<ul>\n<li>bridge between on prem storage and aws</li>\n<li>typically, servers on premise are attached to and using nas (network attached storage) also on prem. since maintaining on prem storage is difficult for high availability, etc., we want to combine it with aws capabilities</li>\n<li>can work with file protocols iscsi, nfs (used by linux), smb (windows)</li>\n<li>works with ebs, s3, glacier, etc</li>\n<li>volume mode - <u>for block storage</u> - how to differentiate between volume cached and file stored mode?\n<ul>\n<li>volume stored mode - primary storage is still in on prem. however, asynchronous backups in the form of ebs snapshots are made to aws. so, we are still limited by the on prem storage capacity. understand how with ebs backups, we now have a regionally resilient architecture in place</li>\n<li>volume cached mode - primary storage is in s3, and cached on prem. we can still create ebs snapshots. this architecture is called data center extension</li>\n</ul>\n</li>\n<li>tape mode - if on prem tape drive technology is used for backups, using this mode, with minimal software changes, our backups start using s3 bts. some terminology -\n<ul>\n<li>tape drive - read from / write to tapes. note - tapes are sequential and not random access</li>\n<li>tape loader - does things like loading tapes into drive, etc. from library</li>\n<li>library - where frequently used tapes are stored. its counterpart in s3 is called vtl (virtual tape library)</li>\n<li>shelf - where infrequently used tapes are stored. its counterpart in glacier is called vts (virtual tape shelf)</li>\n</ul>\n</li>\n<li>file mode - files stored on prem translate to s3 objects. the s3 bucket and objects in this case are visible to us unlike in the two other modes. primary storage is s3, and uses local storage for read write caching. the directory structure is also preserved in s3. so now we can use s3 features like athena as well\n<ul>\n<li>one architecture possible using this - two different on prem centers use the same file share. this way, both see the same files, which is backed by s3 bts. my understanding - now, if on prem 1 uploads a file, it is copied to s3 immediately but on prem 2 might not see it immediately, unless it initiates a new <code class=\"language-text\">s3 ls</code> equivalent. for this, there is an upload notification built into this mode as well</li>\n<li>remember that once in s3, we can use features like lifecycle policies for archival, versioning, etc</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"snowball-snowball-edge-snowmobile\" style=\"position:relative;\"><a href=\"#snowball-snowball-edge-snowmobile\" aria-label=\"snowball snowball edge snowmobile permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Snowball, Snowball Edge, Snowmobile</h1>\n<ul>\n<li>designed to move large amounts of data into or out of aws</li>\n<li>it is a physical storage</li>\n<li>encryption at rest using kms</li>\n<li>snowball - 50tb or 80tb. it is ideal for 10tb to 10pb (achieved using multiple devices) of data</li>\n<li>aws prep question - if it takes more than a week or so to transfer data into s3 using for e.g. direct connect or something, consider using snowball</li>\n<li>snowball edge - also has compute - thus allows for processing when ingesting data</li>\n<li>snowball edge also has faster speeds than snowball</li>\n<li>snowmobile - portable data center in a truck, used for 10pb+ data</li>\n</ul>\n<h1 id=\"directory-service\" style=\"position:relative;\"><a href=\"#directory-service\" aria-label=\"directory service permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Directory Service</h1>\n<ul>\n<li>directory - store identity related objects, server objects, file shares, etc. in a tree like structure</li>\n<li>multiple directory structures together form a “forest”</li>\n<li>used in windows environments for central management</li>\n<li>adds - active directory domain services is the most common one. samba is its open source version</li>\n<li>directory service is aws managed version</li>\n<li>other services like amazon workspaces (which is like citrix) use directory service</li>\n<li>simple ad mode - uses samba, helpful for getting started. does not integrate with on prem</li>\n<li>aws managed microsoft ad mode - establish a trust relation with on prem ad. my understanding - so, users can be created inside either aws or inside on premise</li>\n<li>ad connector - directory service can proxy requests to on prem directory implementation, so this way, we can use our on prem directory for managing services like amazon workspaces</li>\n</ul>\n<h1 id=\"datasync\" style=\"position:relative;\"><a href=\"#datasync\" aria-label=\"datasync permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DataSync</h1>\n<ul>\n<li>move data into or out of aws (bidirectional?)</li>\n<li>can work with s3, efs, fsx</li>\n<li>can retain metadata like permissions, timestamps, etc</li>\n<li>for data archival, resilience, etc</li>\n<li>supports encryption and compression</li>\n<li>supports incremental and scheduled transfers</li>\n<li>we run datasync “agents” on prem</li>\n<li>agents use nfs / smb protocol to move data from nas to aws</li>\n<li>each agent can handle 10gbps</li>\n<li>“task” / “job” - what is being synced, on what schedule, the source and target</li>\n</ul>\n<h1 id=\"transfer-family\" style=\"position:relative;\"><a href=\"#transfer-family\" aria-label=\"transfer family permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Transfer Family</h1>\n<ul>\n<li>transfer files to or from s3 and efs using protocols apart from the ones they support like ftp (legacy i.e. file transfer without encryption), ftps, sftp (ftp using ssh), etc</li>\n<li>note - this has no connection with on prem like datasync above, do not confuse</li>\n<li>also supports identity providers like active directory or use custom identity provider via lambda</li>\n</ul>","frontmatter":{"title":"AWS - Part II"}}},"pageContext":{"id":"5db1a216-47f4-5200-9c3c-f903731cbec9"}},"staticQueryHashes":["1037383464","1617985380"]}