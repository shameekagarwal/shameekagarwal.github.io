{"componentChunkName":"component---src-templates-blog-js","path":"/aws-part-v/","result":{"data":{"markdownRemark":{"fields":{"slug":"/aws-part-v/"},"id":"c0f00235-1b97-55ef-bf84-5e6b5dfb6e51","html":"<h1 id=\"ecs\" style=\"position:relative;\"><a href=\"#ecs\" aria-label=\"ecs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ECS</h1>\n<ul>\n<li>we specify what image to run, what port to use, etc. using a container definition</li>\n<li>task definition - a self-contained application, which contains multiple container definitions. they contain networking mode, compatibility (ec2 vs fargate), task role (iam role assumed to interact with other aws services), etc. simpler task definitions may have only one container definition</li>\n<li>service definition - how many copies of a task, how to distribute load between the different tasks using a load balancer, etc. using a service is not mandatory, and we can run a task on its own for simpler use cases</li>\n<li>cluster mode - can be ec2 or fargate\n<ul>\n<li>ec2 - we configure ecs to manage ec2 for us. an asg is used to maintain the “container instances” (ec2 with docker capability). we can ssh into the ec2, etc. we are expected to manage the capacity ourselves, so unlike serverless where we only pay while we use it, here we pay for ec2 even if they are idle. the ec2s are isolated inside a vpc of our choice</li>\n<li>fargate - serverless. we do not have to manage ec2. a shared infrastructure is maintained where our containers are run. the eni of each task is injected inside our specified vpc, so they work just like any other vpc resource at that point. so, if the vpc and subnet allow for public ipv4, the tasks will get a public ipv4. we do not have to think about provisioning or scaling hosts, nor do we have visibility into them</li>\n</ul>\n</li>\n<li>ec2 vs ecs - use ecs if we have containerized our applications</li>\n<li>ecs ec2 vs ecs fargate - fargate mode for burst workloads, less management overhead, etc. ec2 mode for larger workloads or sometimes price if we can find the sweet spot of reserved instances</li>\n<li>can work with systems manager parameter store + kms for injecting secrets as environment variables. remember that for this, the ecs task role should have the correct permissions</li>\n</ul>\n<h1 id=\"ecr\" style=\"position:relative;\"><a href=\"#ecr\" aria-label=\"ecr permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ECR</h1>\n<ul>\n<li>elastic container registry</li>\n<li>container image registry of aws</li>\n<li>each aws account has a public and a private registry</li>\n<li>each registry can have many repositories</li>\n<li>each repository can have many images</li>\n<li>each image can have multiple tags</li>\n<li>public registry - anyone can pull, permissions are needed for push</li>\n<li>private registry - permissions are needed for both pull and push</li>\n<li>advantages - integrated with aws like iam, scanning using inspector, metrics in cloudwatch, logs in cloudtrail, events using cloudwatch, etc</li>\n<li>my guess - pulling images should be quicker inside aws infra since aws network is used?</li>\n<li>images can be replicated cross region and cross account</li>\n</ul>\n<h1 id=\"eks\" style=\"position:relative;\"><a href=\"#eks\" aria-label=\"eks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>EKS</h1>\n<ul>\n<li>elastic kubernetes service</li>\n<li>aws managed kubernetes</li>\n<li>can run on aws, eks anywhere (uses on prem nodes), aws outposts (runs entirely on prem) and eks have even made it opensource via eks distro</li>\n<li>the control plane is managed by aws and runs across azs</li>\n<li>it can use elb, ecr, iam, vpc</li>\n<li>eks cluster = control plane + eks nodes</li>\n<li>nodes can be\n<ul>\n<li>self-managed - ec2 managed by us</li>\n<li>managed node groups - ec2 managed by eks</li>\n<li>fargate pods - serverless</li>\n</ul>\n</li>\n<li>storage providers - ebs, efs, fsx lustre, etc</li>\n<li>the control plane runs from an aws managed vpc</li>\n<li>the nodes are in the customer’s vpc</li>\n<li>the control plane talks to the worker nodes via their enis</li>\n<li>the worker nodes / we can talk to the control plane via its public admin endpoint</li>\n<li>an ingress controller is used to route traffic from customers to the workloads on worker nodes</li>\n<li>iam can be used for authentication, but still use k8s native rbac capabilities for authorization. the iam authenticator runs inside the control plane and derives its configuration from the <u>aws-auth config map</u></li>\n</ul>\n<h1 id=\"machine-learning\" style=\"position:relative;\"><a href=\"#machine-learning\" aria-label=\"machine learning permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Machine Learning</h1>\n<ul>\n<li>amazon transcribe - speech to text using asr (automatic speech recognition). this can help with automatic subtitle generation, text based content analysis of audio content, etc</li>\n<li>amazon comprehend - nlp based analysis - e.g. sentiment analysis of reviews</li>\n<li>amazon translate - translate text between supported languages</li>\n<li>amazon rekognition - image recognition service</li>\n</ul>","frontmatter":{"title":"AWS - Part V"}}},"pageContext":{"id":"c0f00235-1b97-55ef-bf84-5e6b5dfb6e51"}},"staticQueryHashes":["1037383464","1617985380"]}