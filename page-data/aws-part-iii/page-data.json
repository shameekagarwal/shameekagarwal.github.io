{"componentChunkName":"component---src-templates-blog-js","path":"/aws-part-iii/","result":{"data":{"markdownRemark":{"fields":{"slug":"/aws-part-iii/"},"id":"760e1cc0-a68e-566e-bb34-dd002d02aa94","html":"<h1 id=\"dynamodb\" style=\"position:relative;\"><a href=\"#dynamodb\" aria-label=\"dynamodb permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DynamoDB</h1>\n<h3 id=\"about\" style=\"position:relative;\"><a href=\"#about\" aria-label=\"about permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>About</h3>\n<ul>\n<li>nosql dbaas (db as a service) i.e. we do not have to maintain any servers or infrastructure</li>\n<li>even rds is not fully dbaas, it is db server as a service</li>\n<li>key value db, document db, wide column db</li>\n<li>can be highly resilient across az or optionally even globally</li>\n<li>event driven integration i.e. perform actions when data changes</li>\n<li>in dynamodb, we use tables (not even databases)</li>\n<li>a table has items</li>\n</ul>\n<h3 id=\"primary-keys-and-attributes\" style=\"position:relative;\"><a href=\"#primary-keys-and-attributes\" aria-label=\"primary keys and attributes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Primary Keys and Attributes</h3>\n<ul>\n<li>primary keys in dynamo db can be of two types -\n<ul>\n<li>simple - partition key</li>\n<li>composite - partition key + sort key</li>\n</ul>\n</li>\n<li>primary key should be unique - be it simple or composite (combination should be unique)</li>\n<li>items can have attributes - no limitation here, an item can have all attributes of its table, none of the attributes or even different attributes from its table, but this is basically a feature of nosql i guess</li>\n<li>items can be max 400kb in size - remember nosql basically is key value pair, so this size includes the space required to store key as well</li>\n<li>note - for good performance, avoid “hot” partitions i.e. use partition keys with high cardinality attributes, which result in a larger number of distinct values</li>\n</ul>\n<h3 id=\"backups\" style=\"position:relative;\"><a href=\"#backups\" aria-label=\"backups permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Backups</h3>\n<ul>\n<li>manual (on demand) - full copy of table is made. when restoring, we can\n<ul>\n<li>do it in same or cross region</li>\n<li>choose to retain or drop the indexes</li>\n<li>change the encryption settings</li>\n</ul>\n</li>\n<li>automatic - pitr (point in time recovery)\n<ul>\n<li>disabled by default</li>\n<li>35-day window</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"capacity\" style=\"position:relative;\"><a href=\"#capacity\" aria-label=\"capacity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Capacity</h3>\n<ul>\n<li>capacity can be provisioned (set capacity upfront) or on-demand</li>\n<li>we can switch between them even after adding data</li>\n<li>if we chose on demand - there is a cost per operation</li>\n<li>on demand is much more costly than provisioned</li>\n<li>if we chose provisioned, we set the rcu (read capacity units) and wcu (write capacity units) explicitly</li>\n<li>every operation consumes 1 rcu or 1 wcu</li>\n<li>1 rcu allows 1 (consistent) read operation of 4kb per second. my understanding - reading a 6kb item would consume 2 rcu, reading just one 1kb item would consume 1 rcu</li>\n<li>1 wcu allows 1 write operation of 1kb per second</li>\n<li>we have a burst pool of 300 seconds per table to use from as well</li>\n</ul>\n<h3 id=\"operations\" style=\"position:relative;\"><a href=\"#operations\" aria-label=\"operations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Operations</h3>\n<ul>\n<li>query\n<ul>\n<li>we have to provide partition key to query based on. we can optionally provide one sort key or a range of sort keys and then a limit. rcus consumed can be calculated from number of records returned</li>\n<li>if we provide more attributes to filter on, the results are dropped but the rcu is still consumed according to above parameters. so, there is client side filtering for additional attributes, not server side</li>\n<li>note - because of how rcus work, reading multiple items using one operation is cheaper than reading using multiple operations</li>\n</ul>\n</li>\n<li>scan\n<ul>\n<li>inefficient, but flexible, since it runs item by item</li>\n<li>i think advantage is we aren’t obligated to provide partition key</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"consistency\" style=\"position:relative;\"><a href=\"#consistency\" aria-label=\"consistency permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Consistency</h3>\n<ul>\n<li>consider scalability, cost, etc</li>\n<li>in dynamodb, data is replicated across 3 different azs (like s3?)</li>\n<li>the data is stored in “storage nodes”, and one of the three storage nodes is elected as the leader</li>\n<li>writes go to leader storage node</li>\n<li>after this, the leader storage node replicates this write to other storage nodes</li>\n<li>reads can have two modes - eventually or strongly (immediately) consistent</li>\n<li>eventual reads are cheaper and can be 8kb per second since it can go to any of the storage nodes unlike strongly consistent reads which read from leader node and therefore are 4kb per second</li>\n</ul>\n<h3 id=\"indexes\" style=\"position:relative;\"><a href=\"#indexes\" aria-label=\"indexes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Indexes</h3>\n<ul>\n<li>indexes provide alternate views on our table, thus helping us to use “query”</li>\n<li>when we create these indexes (applies to both types), we can choose a projection (what attributes should go into this view). this helps with increasing performance of querying -\n<ul>\n<li>all - include all attributes</li>\n<li>keys only - only include the keys</li>\n<li>include - we can specify what attributes to include</li>\n</ul>\n</li>\n<li>indexes are sparse (applies  to both types) i.e. if there are rows where this index is not present, these rows are not included in the view altogether. this means we have fewer records in the view. and this means we can also see performance benefit in operations like scan and query</li>\n<li>lsi (local secondary index)\n<ul>\n<li>create a view using a different sort key</li>\n<li>need to be specified at the time of table creation</li>\n<li>we can have upto 5 lsis at a time</li>\n<li>share the same rcu and wcu as the base table</li>\n<li>we have to use the same partition key, but now we can use a different sort key when performing the query operation</li>\n<li>strong consistency</li>\n</ul>\n</li>\n<li>gsi (global secondary index)\n<ul>\n<li>create a view using a different partition and sort key</li>\n<li>can be specified anytime, even after creating the base table</li>\n<li>we can have upto 20 gsis at a time</li>\n<li>have their own rcu and wcu</li>\n<li>eventual consistency</li>\n<li>encouraged to be used unless we need strong consistency, same rcu wcu, etc</li>\n</ul>\n</li>\n<li>my doubt - what happens to primary keys when we create indexes? can we still enforce a unique key when we create indexes? doesn’t seem feasible. <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LSI.html\">lsi docs</a> - however, in a local secondary index, the sort key value does not need to be unique for a given partition key value. <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GSI.html\">gsi docs</a> - however, the key values in a global secondary index do not need to be unique</li>\n</ul>\n<h3 id=\"streams\" style=\"position:relative;\"><a href=\"#streams\" aria-label=\"streams permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Streams</h3>\n<ul>\n<li>time ordered list of item changes to dynamodb tables</li>\n<li>24hr rolling windows (uses kinesis streams bts)</li>\n<li>inserts, updates and deletes are recorded in the streams</li>\n<li>view type influences what data gets added to the stream\n<ul>\n<li>keys only - partition and sort key. requires a read from dynamodb again for exact change</li>\n<li>new image - state of the item after the change</li>\n<li>old image - state of the item before the change</li>\n<li>new and old image - remember old image will be blank when an item is inserted / new image will be blank when an item is deleted</li>\n</ul>\n</li>\n<li>triggers - e.g. a lambda when data is added to the stream</li>\n<li>aws prep question - e.g. a company wants to remove pii before storing data. if we use dynamodb streams + triggers, data is first stored, then the lambda transforms and restores it into the db. note how first pii is stored then transformed and stored again. this can be a potential risk</li>\n<li>my understanding - “dynamodb streams kinesis adapter” provides an implementation of kcl (kinesis client library). so, our application just needs to interact with kcl to process dynamodb streams. recall how we mentioned above that dynamodb streams internally uses kinesis streams</li>\n</ul>\n<h3 id=\"global-tables\" style=\"position:relative;\"><a href=\"#global-tables\" aria-label=\"global tables permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Global Tables</h3>\n<ul>\n<li>multi-master and cross-region replication</li>\n<li>dynamodb tables in the different regions are called replica tables, and together they are called a global table</li>\n<li>last write wins - most recent write is replicated and overwritten everywhere</li>\n<li>reads and writes can be done in any region</li>\n<li>strongly consistent in same region but eventually consistent (sub-second) in different regions</li>\n</ul>\n<h3 id=\"dax\" style=\"position:relative;\"><a href=\"#dax\" aria-label=\"dax permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DAX</h3>\n<ul>\n<li>dynamodb accelerator</li>\n<li>in memory cache for dynamodb</li>\n<li>instead of the application reading from / writing to cache, our application only interacts with dax, and dax handles cache misses itself - a big advantage over elasticache?</li>\n<li>we deploy dax to a vpc</li>\n<li>we deploy to multiple azs for resilience. one of the nodes becomes the master and the others read replicas</li>\n<li>dax nodes have two parts - item cache for individual items and query cache for the entire result of query / scan operations, including query parameters which were used</li>\n<li>write-through mode is supported as well - be mindful of cache churn?</li>\n</ul>\n<h3 id=\"ttl\" style=\"position:relative;\"><a href=\"#ttl\" aria-label=\"ttl permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TTL</h3>\n<ul>\n<li>we enable ttl on a table and specify the attribute to use</li>\n<li>the attribute contains the seconds since epoch (january 1, 1970)</li>\n<li>automated process run on every partition, which set items to expired</li>\n<li>another automated process removes items which were marked as expired</li>\n<li>the deleted items are added to any streams of the table / <u>we can create a stream specifically for ttl as well</u></li>\n</ul>\n<h1 id=\"athena\" style=\"position:relative;\"><a href=\"#athena\" aria-label=\"athena permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Athena</h1>\n<ul>\n<li>serverless interactive querying service - adhoc queries on data inside s3</li>\n<li>schema on read - data in s3 is unchanged but when we look through athena, it looks like a table</li>\n<li>we define how to convert data from source to table-like structure</li>\n<li>supports different file formats like csv, avro, json, etc</li>\n<li>ideal for querying service logs of aws / adhoc queries to make decisions</li>\n<li>athena federated query - run queries on sources that are not s3, as long as athena has a “connector” for it</li>\n<li><u>query results of athena are stored in an s3 bucket, so we need to set this up before starting to use athena</u></li>\n<li>when we create a table definition, we specify the source bucket to use</li>\n<li>athena scans a certain amount of objects in s3, and we are only billed according to that read</li>\n</ul>\n<h1 id=\"elasticache\" style=\"position:relative;\"><a href=\"#elasticache\" aria-label=\"elasticache permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Elasticache</h1>\n<ul>\n<li>in memory database for high performance</li>\n<li>reduces read load on databases. reduces cost as well, as querying databases is costlier</li>\n<li>can be used for session data to make applications stateless</li>\n<li>requires application changes, application should understand cache - unlike dax?</li>\n<li>offers managed redis and memcached</li>\n<li>memcached is usually used only for simple data structures like strings, while redis can support much more complex structures like lists, sets, sorted sets, bit arrays, etc</li>\n<li>redis supports replication of data over azs, while memcached uses sharding and not replication this way</li>\n<li>redis supports recovery i.e. backups and restore unlike memcached</li>\n<li>memcached is multithreaded by design, so can be more performant on a multicore cpu unlike redis</li>\n<li>redis supports transactions unlike memcached</li>\n<li>redis auth - <code class=\"language-text\">--auth-token</code>, helps password protect redis server</li>\n</ul>\n<h1 id=\"redshift\" style=\"position:relative;\"><a href=\"#redshift\" aria-label=\"redshift permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Redshift</h1>\n<ul>\n<li><u>data warehouse</u> for petabytes of data</li>\n<li>olap unlike rds that is oltp</li>\n<li>column based, so it is more for aggregating historical data for reporting</li>\n<li>redshift spectrum - queries data in s3, so data does not have to be loaded into redshift storage</li>\n<li>redshift federated query - query data in remote datasources. so is this like redshift spectrum but not for s3? recall that athena has this feature too</li>\n<li>integrates with quicksight for visualization</li>\n<li><u>can use sql queries and jdbc like connections from our applications</u></li>\n<li>athena vs redshift - redshift is provisioned servers unlike athena that is serverless. it is not for adhoc queries like athena, it is more for production use cases</li>\n<li>redshift cluster runs in one az for high performance, so it is <u>az resilient</u> by design</li>\n<li>all applications interact with a leader node, which sources queries to its compute nodes</li>\n<li>iam permissions, kms encryption, cw monitoring</li>\n<li>enhanced vpc routing - by default, redshift uses public routes and so this is disabled. enable this to use vpc features like gateways, nacls, etc</li>\n<li>redshift stores automatic snapshots to s3 every 8 hours or 5gb of data</li>\n<li>retention is 1 day, can be configured upto 35 days</li>\n<li>the snapshot discussed above are automated, but we can have manual backups as well, which again will not have an expiration time like above</li>\n<li>these snapshots make it somewhat region resilient (s3 snapshot, and s3 is region resilient)</li>\n<li>we can also choose to copy snapshots across region to make the data globally resilient</li>\n<li>so while redshift itself isn’t resilient, the data inside it can be configured to be so</li>\n<li>we can load data into redshift from dynamodb, s3, kinesis or use dms</li>\n</ul>\n<h1 id=\"cloudformation\" style=\"position:relative;\"><a href=\"#cloudformation\" aria-label=\"cloudformation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cloudformation</h1>\n<h3 id=\"about-1\" style=\"position:relative;\"><a href=\"#about-1\" aria-label=\"about 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>About</h3>\n<ul>\n<li>we create templates in yaml / json</li>\n<li>we only specify logical resources in the templates - what we want to provision</li>\n<li>a template can be used to create multiple stacks</li>\n<li>stacks create physical resources using the logical resources we provide</li>\n<li>stacks keep logical resources and physical resources in sync as the template changes</li>\n<li>once the physical resources move to “create complete” state, the attributes of the physical resource can be queried by other logical resources when provisioning them</li>\n<li>deleting a stack deletes all the physical resources associated with the stack</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-yaml line-numbers\"><code class=\"language-yaml\"><span class=\"token key atrule\">Resources</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">Bucket</span><span class=\"token punctuation\">:</span>                           <span class=\"token comment\"># name of the logical resource</span>\n    <span class=\"token key atrule\">Type</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'AWS::S3::Bucket'</span>         <span class=\"token comment\"># type of the logcial resource</span>\n    <span class=\"token key atrule\">Properties</span><span class=\"token punctuation\">:</span>                     <span class=\"token comment\"># configuration for the logical resource</span>\n      <span class=\"token key atrule\">BucketName</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'agsham-86t638jb'</span>\n  \n  <span class=\"token key atrule\">Instance</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">Type</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'AWS::EC2::Instance'</span>\n    <span class=\"token key atrule\">Properties</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">InstanceType</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'t2.micro'</span>\n      <span class=\"token key atrule\">ImageId</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'ami-0fa1de1d60de6a97e'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>stacks should be portable - ami should be derived from the region the stack is deployed to instead of hardcoding it, s3 bucket name should be configurable since it should be unique, etc</li>\n<li>ssm has the capability to provide us with the right ami in the region we deploy to</li>\n<li>if possible, avoid naming, as cloudformation can give names using logical resource name, stack name and finally append this with a random identifier</li>\n</ul>\n<h3 id=\"parameters\" style=\"position:relative;\"><a href=\"#parameters\" aria-label=\"parameters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Parameters</h3>\n<ul>\n<li>template parameters - humans or the automated process provide values, e.g. environment when the stack is created or updated. the values can be referenced by the logical resources</li>\n<li>it can have default values, allowed values (appears like a dropdown in ui), allowed patterns, type, min and max, and no echo (appears like a password field in ui), description</li>\n<li>pseudo parameters - provided by aws, e.g. <code class=\"language-text\">AWS::Region</code> (region the stack is being created in)</li>\n</ul>\n<h3 id=\"intrinsic-functions\" style=\"position:relative;\"><a href=\"#intrinsic-functions\" aria-label=\"intrinsic functions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intrinsic Functions</h3>\n<ul>\n<li><code class=\"language-text\">Ref</code> - every parameter and logical resource returns a value. parameter returns its value (lol) and logical resource returns the physical resource’s id. syntax -\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">!Ref &lt;&lt;parameter-name>>\n!Ref &lt;&lt;logical-resource-name>></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n</li>\n<li><code class=\"language-text\">Fn::GetAtt</code> - get value of a physical resource’s attribute. syntax is <code class=\"language-text\">!GetAtt &lt;&lt;logical-resource>>.att</code></li>\n<li><code class=\"language-text\">!Split ['|', 'a|b|c']</code> and <code class=\"language-text\">!Join ['', ['http://', !GetAtt Instance.DNSName]]</code></li>\n<li><code class=\"language-text\">!GetAZs \"\"</code> will give the list of azs in the region we are deploying the stack into, or we can provide the region explicitly (or even use <code class=\"language-text\">AWS::Region</code>). nuance - it actually returns all the azs where there is a subnet deployed for the default vpc</li>\n<li><code class=\"language-text\">!Select [0, !GetAZs '']</code> - get a list and index and returns the value of the list at that index</li>\n<li>conditions - <code class=\"language-text\">Fn::Equals</code>, <code class=\"language-text\">Fn::If</code>, <code class=\"language-text\">Fn::Or</code>, <code class=\"language-text\">Fn::And</code>, <code class=\"language-text\">Fn::Not</code></li>\n<li><code class=\"language-text\">Fn::Base64</code> - convert to base64 encoding</li>\n<li><code class=\"language-text\">Fn::Sub</code> - substitute text, e.g. substitute parameters (pseudo or template) inside user data script. when using this, the ref equivalent is <code class=\"language-text\">${parameter}</code>, <code class=\"language-text\">${logical-resource}</code> and the getatt equivalent is <code class=\"language-text\">${logical-resource.att}</code></li>\n<li><code class=\"language-text\">Fn::Cidr</code> - we give it a cidr, how many subnets we need, no. of host bits for subnet. it gives us back a list of subnets according to that</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-yaml line-numbers\"><code class=\"language-yaml\"><span class=\"token key atrule\">VPC</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">Type</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'AWS::EC2::VPC'</span>\n  <span class=\"token key atrule\">Properties</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">CidrBlock</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'10.0.0.0/16'</span>\n\n<span class=\"token key atrule\">Subnet1</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">Type</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'AWS::EC2::Subnet'</span>\n  <span class=\"token key atrule\">Properties</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">CidrBlock</span><span class=\"token punctuation\">:</span> <span class=\"token tag\">!Select</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token tag\">!Cidr</span> <span class=\"token punctuation\">[</span><span class=\"token tag\">!GetAtt</span> VPC.CidrBlock<span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n    <span class=\"token key atrule\">VpcId</span><span class=\"token punctuation\">:</span> <span class=\"token tag\">!Ref</span> VPC\n\n<span class=\"token key atrule\">Subnet2</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">Type</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'AWS::EC2::Subnet'</span>\n  <span class=\"token key atrule\">Properties</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">CidrBlock</span><span class=\"token punctuation\">:</span> <span class=\"token tag\">!Select</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token tag\">!Cidr</span> <span class=\"token punctuation\">[</span><span class=\"token tag\">!GetAtt</span> VPC.CidrBlock<span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n    <span class=\"token key atrule\">VpcId</span><span class=\"token punctuation\">:</span> <span class=\"token tag\">!Ref</span> VPC</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id=\"mappings\" style=\"position:relative;\"><a href=\"#mappings\" aria-label=\"mappings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mappings</h3>\n<ul>\n<li>key value lookups</li>\n<li>can have multiple levels</li>\n<li>e.g. find ami based on region and then architecture</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-yaml line-numbers\"><code class=\"language-yaml\"><span class=\"token tag\">!FindInMap</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'RegionMap'</span><span class=\"token punctuation\">,</span> <span class=\"token tag\">!Ref</span> <span class=\"token string\">'AWS::Region'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'HVM::64'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token key atrule\">Mappings</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">RegionMap</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">us-east-1</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">HVM64</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">...</span>\n      <span class=\"token key atrule\">HVMG2</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">...</span>\n      <span class=\"token punctuation\">...</span>\n \n    <span class=\"token key atrule\">us-west-1</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">...</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id=\"outputs\" style=\"position:relative;\"><a href=\"#outputs\" aria-label=\"outputs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Outputs</h3>\n<ul>\n<li>visible as outputs in the ui</li>\n<li>accessible from parent stack when nesting stacks</li>\n<li>accessible from cross stacks when exported</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-yaml line-numbers\"><code class=\"language-yaml\"><span class=\"token key atrule\">Outputs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">InstanceURL</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">Description</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">Value</span><span class=\"token punctuation\">:</span> <span class=\"token tag\">!Join</span> <span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'http://'</span><span class=\"token punctuation\">,</span> <span class=\"token tag\">!GetAtt</span> Instance.DNSName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id=\"conditions\" style=\"position:relative;\"><a href=\"#conditions\" aria-label=\"conditions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conditions</h3>\n<ul>\n<li>the conditions are processed before resources using them are created</li>\n<li>if the condition evaluates to true, the resource using this condition is created, else not</li>\n<li>e.g. create duplicated resources only if a parameter multi az is set to true</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-yaml line-numbers\"><code class=\"language-yaml\"><span class=\"token key atrule\">Conditions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">IsProd</span><span class=\"token punctuation\">:</span> <span class=\"token tag\">!Equals</span> <span class=\"token punctuation\">[</span><span class=\"token tag\">!Ref</span> EnvType<span class=\"token punctuation\">,</span> <span class=\"token string\">'dev'</span><span class=\"token punctuation\">]</span>\n  \n<span class=\"token key atrule\">MyEIP</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">Type</span><span class=\"token punctuation\">:</span> AWS<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>EC2<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>EIP\n  <span class=\"token key atrule\">Condition</span><span class=\"token punctuation\">:</span> IsProd\n  <span class=\"token punctuation\">...</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id=\"dependson\" style=\"position:relative;\"><a href=\"#dependson\" aria-label=\"dependson permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DependsOn</h3>\n<ul>\n<li>cloudformation tries to create resources when possible in parallel</li>\n<li>it tries to maintain an order, e.g. create vpc first and then the subnets inside it</li>\n<li>it tries to create a dependency tree to help with this order</li>\n<li>e.g. when a subnet references the vpc</li>\n<li>we can explicitly define a dependency using this construct</li>\n<li>mostly the inbuilt dependency tree works, this is needed for one off cases</li>\n<li>when using this, it waits for the resource it depends on to be in create complete state</li>\n<li>a common use case - elastic ip needs igw to be created. but we need to define this dependency explicitly</li>\n<li>we can specify one or a list of resources in this</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-yaml line-numbers\"><code class=\"language-yaml\"><span class=\"token key atrule\">MyEip</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">Type</span><span class=\"token punctuation\">:</span> AWS<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>EC2<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>EIP\n  <span class=\"token key atrule\">DependsOn</span><span class=\"token punctuation\">:</span> InternetGatewayAttachment</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h3 id=\"wait-and-cfn-signal\" style=\"position:relative;\"><a href=\"#wait-and-cfn-signal\" aria-label=\"wait and cfn signal permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wait and CFN Signal</h3>\n<ul>\n<li>the stack matches logical resource with physical resource</li>\n<li>but this is not enough sometimes, e.g. an ec2 is provisioned and therefore the stack sees create complete for this resource, but it still has bootstrap scripts, and the physical resource would be deleted if this script fails</li>\n<li>so, cloudformation can instead wait for a success signal(<strong>s</strong>), can be sent using the cfn-signal package</li>\n<li>we can configure a timeout (max 12 hrs) to receive this signal(<strong>s</strong>)</li>\n<li>sometimes, we need to put wait states, so we can use wait conditions</li>\n<li>wait conditions are like other resources in cloudformation</li>\n<li>the wait condition depends on some resources, and other resources can depend on the wait condition</li>\n<li>once the wait condition receives its signals / the timeout configured on the wait condition expires, the resources relying on this wait condition can proceed</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-yaml line-numbers\"><code class=\"language-yaml\"><span class=\"token key atrule\">WaitHandle</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">Type</span><span class=\"token punctuation\">:</span> AWS<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>CloudFormation<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>WaitConditionHandle\n\n<span class=\"token key atrule\">WaitCondition</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">Type</span><span class=\"token punctuation\">:</span> AWS<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>CloudFormation<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>WaitCondition\n  <span class=\"token key atrule\">DependsOn</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'some_resource'</span>\n  <span class=\"token key atrule\">Properties</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">Handle</span><span class=\"token punctuation\">:</span> <span class=\"token tag\">!Ref</span> WaitHandle\n    <span class=\"token key atrule\">Timeout</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'300'</span>\n    <span class=\"token key atrule\">Count</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>we can use wait conditions not just for sending signals, but resources can also send data when sending signals. so it can be used to maintain some kind of state as well</li>\n<li>this data can be accessed using <code class=\"language-text\">!GetAtt WaitCondition.Data</code></li>\n<li>a pre signed url is generated, so that no credentials are required when interacting with it</li>\n</ul>\n<h3 id=\"nested-stacks\" style=\"position:relative;\"><a href=\"#nested-stacks\" aria-label=\"nested stacks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Nested Stacks</h3>\n<ul>\n<li>a stack can only have 500 resources at max</li>\n<li>root stack - the only one which we first provision manually</li>\n<li>parent stack - a stack having nested stacks as children. nested stacks can be multiple levels deep</li>\n<li>we do this by defining nested stacks like a logical resource</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-yaml line-numbers\"><code class=\"language-yaml\"><span class=\"token key atrule\">VPCStack</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">Type</span><span class=\"token punctuation\">:</span> AWS<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>Cloudformation<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>Stack\n  <span class=\"token key atrule\">Properties</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">TemplateURL</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//xyz.com/something.yaml\n    <span class=\"token key atrule\">Parameters</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">Param1</span><span class=\"token punctuation\">:</span> <span class=\"token tag\">!Ref</span> SomeParam1</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>we need to provide the nested stack with any parameters that it needs (except ones with default values?) otherwise the stack creation will fail</li>\n<li>when the nested stack finishes provisioning its resources, and moves to create complete, the parent stack also moves to create complete since all its resources (nested stacks in this case) have completed provisioning</li>\n<li>the nested stack outputs are returned to its parent stack</li>\n<li>we can only use outputs of nested stacks</li>\n<li>e.g. we have an application stack, which is fed parameters that are outputs of the vpc stack</li>\n<li>we do not reuse the physical resources, we reuse the template aka the code</li>\n<li>this helps keep our code modular</li>\n<li>the lifecycle here is linked with each other, i.e. deleting the parent stack deletes its nested stacks</li>\n</ul>\n<h3 id=\"cross-stack\" style=\"position:relative;\"><a href=\"#cross-stack\" aria-label=\"cross stack permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cross Stack</h3>\n<ul>\n<li>e.g. we want a vpc to be shared by other applications</li>\n<li>i think cross stack are only same region and same account</li>\n<li>outputs of a stack can be “exported” so that it can be viewed from other stacks</li>\n<li>exported name needs to be unique within the region and account</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-yaml line-numbers\"><code class=\"language-yaml\"><span class=\"token tag\">!ImportValue</span> SharedVPCID <span class=\"token comment\"># usage</span>\n\n<span class=\"token comment\"># ...</span>\n<span class=\"token key atrule\">Outputs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">SharedVPCID</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">Value</span><span class=\"token punctuation\">:</span> <span class=\"token tag\">!Ref</span> VPC\n    <span class=\"token key atrule\">Export</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">Name</span><span class=\"token punctuation\">:</span> SharedVPCID</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3 id=\"stack-sets\" style=\"position:relative;\"><a href=\"#stack-sets\" aria-label=\"stack sets permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Stack Sets</h3>\n<ul>\n<li>manage infrastructure across regions and accounts</li>\n<li>stack sets - stack sets are like containers. we create a stack set in a specific account (called admin account)</li>\n<li>stack instances - stack sets contain stack instances</li>\n<li>stack sets permissions can be self-managed iam roles or service-managed using aws organizations</li>\n<li>cloudformation creates stack instances for each region account combination that we select</li>\n<li>stack instances keep record of all stacks created in the account and region</li>\n<li>concurrent accounts - how many individual accounts are used at a time when deploying stacks into. e.g. if concurrent accounts = 2 and we have 10 target accounts, at a time, 2 accounts are deployed into and 5 iterations are needed</li>\n<li>failure tolerance - number of deployments that have to be in failed state for the stack set itself to be failed</li>\n<li>retain stacks - removing stack instances from stack sets deletes the stacks inside this stack instance by default. this option can control this behavior</li>\n<li>use case of stack sets - larger organizations, initial setup for individual teams</li>\n</ul>\n<h3 id=\"deletion-policy\" style=\"position:relative;\"><a href=\"#deletion-policy\" aria-label=\"deletion policy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Deletion Policy</h3>\n<ul>\n<li>if we delete a stack or remove a logical resource, the corresponding physical resources get deleted</li>\n<li>this can cause data loss in rds, ebs, etc</li>\n<li>we can specify a deletion policy at resource level</li>\n<li>delete (the default option), retain (cloudformation will not delete this resource) and “some resources” e.g. rds, elasticache, etc. support snapshot</li>\n<li>snapshots are not attached to stack lifecycle, so managing them is on us</li>\n</ul>\n<h3 id=\"stack-roles\" style=\"position:relative;\"><a href=\"#stack-roles\" aria-label=\"stack roles permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Stack Roles</h3>\n<ul>\n<li>by default, cloudformation uses the identity of the person creating the stack to create aws resources</li>\n<li>so, we need permissions to crud cloudformation stacks and the resources inside stacks</li>\n<li>stack roles - cloudformation can assume roles to do this, to ensure role separation</li>\n<li>this way, we only need permissions to pass role and permissions for cloudformation stacks</li>\n</ul>\n<h3 id=\"cloudformation-init\" style=\"position:relative;\"><a href=\"#cloudformation-init\" aria-label=\"cloudformation init permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cloudformation Init</h3>\n<ul>\n<li>also called cfn-init</li>\n<li>this is a cloudformation feature</li>\n<li>till now, we used user data script, an ec2 feature</li>\n<li><code class=\"language-text\">AWS::Cloudformation::Init</code> section of logical resources like ec2</li>\n<li>user data script - it is procedural, we define how</li>\n<li>cfn-init - we specify desired state, we define what</li>\n<li>this makes cfn-init cross-platform</li>\n<li>user data script, which is only run at the beginning</li>\n<li>cfn-init it is idempotent i.e. if we apply it multiple times, it checks and if the config keys have already been applied, it will not try and reapply them again</li>\n<li>the cfn-init data inside our template can be accessed by executing cfn-init on the ec2 using user data</li>\n<li>we have configSets and different config keys under the cfn init construct</li>\n<li>inside configSets, we can define different config keys to use and in what order</li>\n<li>cfn-hup - a helper that we can install, which runs like a daemon</li>\n<li>it monitors the metadata cfn-init section for any changes and reruns cfn-init to reapply the desired state</li>\n<li>i think this is where cfn-init being idempotent comes into action?</li>\n<li>also, cfn-hup doesn’t come bundled with the ami unlike cfn-init?</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-yaml line-numbers\"><code class=\"language-yaml\"><span class=\"token key atrule\">EC2Instance</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">Type</span><span class=\"token punctuation\">:</span> AWS<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>EC2<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>Instance\n  <span class=\"token key atrule\">CreationPolicy</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">ResourceSignal</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">Timeout</span><span class=\"token punctuation\">:</span> PT15M\n  <span class=\"token key atrule\">Metadata</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">AWS::Cloudformation::Init</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">configSets</span><span class=\"token punctuation\">:</span>\n      <span class=\"token comment\"># .. other config keys</span>\n      <span class=\"token key atrule\">wordpress_install</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">packages</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># packages to install</span>\n        <span class=\"token key atrule\">users</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># user mgmt</span>\n        <span class=\"token key atrule\">groups</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># grp mgmt</span>\n        <span class=\"token key atrule\">sources</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># sources to download and extract binaries from</span>\n        <span class=\"token key atrule\">files</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># files to create</span>\n        <span class=\"token key atrule\">commands</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># commands to execute</span>\n        <span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># services to enable</span>\n  <span class=\"token key atrule\">Properties</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">UserData</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">Fn::Base64</span><span class=\"token punctuation\">:</span> <span class=\"token tag\">!Sub</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n        #!/bin/bash -xe\n        yum -y update\n        /opt/aws/bin/cfn-init --stack ${AWS::StackId} --region ${AWS::Region} \\\n          --resource EC2Instance --configsets wordpress_install\n        /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --region ${AWS::Region} \\\n          --resorce EC2Instance</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>a combination of creation policy + cfn signal is used to ensure that the ec2 resource is marked as creation complete only after the user data script is executed successfully. creation policy is right now supported by asg, instance and wait condition</li>\n<li>we use cfn init + wait signal above</li>\n<li>so important paths to remember - /var/log/ and /opt/aws/bin/</li>\n</ul>\n<h3 id=\"change-sets\" style=\"position:relative;\"><a href=\"#change-sets\" aria-label=\"change sets permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Change Sets</h3>\n<ul>\n<li>changes can result in no interruption, some interruption (for e.g. instance reboot) and replacement (for e.g. can involve loss of data as well)</li>\n<li>change set - we can review the changes</li>\n<li>this way, we can have different change sets, compare them and finally apply one of them</li>\n<li>change sets display the changes in ui that they would make when applied</li>\n</ul>\n<h3 id=\"custom-resources\" style=\"position:relative;\"><a href=\"#custom-resources\" aria-label=\"custom resources permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Custom Resources</h3>\n<ul>\n<li>for features not supported natively</li>\n<li>e.g. provision non aws resources</li>\n<li>it sends event data to an endpoint we configure - sns topic or lambda</li>\n<li>the endpoint will return a success or a failure</li>\n<li>this endpoint can then send back data as well, which can be used by other resources in the stack</li>\n<li>e.g. we try deleting a stack that creates an s3 bucket, but we added objects to this s3 bucket. deleting the stack would fail since deleting the bucket would fail. use this custom resource to clear the s3 bucket when the stack is being deleted</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-yaml line-numbers\"><code class=\"language-yaml\"><span class=\"token key atrule\">Resources</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">customresource</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">Type</span><span class=\"token punctuation\">:</span> Custom<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>HocusPocus <span class=\"token comment\"># anything but should start with Custom:: ?</span>\n    <span class=\"token key atrule\">Properties</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">ServiceToken</span><span class=\"token punctuation\">:</span> <span class=\"token tag\">!GetAtt</span> function.Arn <span class=\"token comment\"># endpoint ?</span>\n\n  <span class=\"token key atrule\">function</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">Type</span><span class=\"token punctuation\">:</span> AWS<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>Lambda<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>Function\n    <span class=\"token comment\"># ...</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","frontmatter":{"title":"AWS - Part III"}}},"pageContext":{"id":"760e1cc0-a68e-566e-bb34-dd002d02aa94"}},"staticQueryHashes":["1037383464","1617985380"]}