{"componentChunkName":"component---src-templates-blog-js","path":"/kubernetes-part-ii/","result":{"data":{"markdownRemark":{"fields":{"slug":"/kubernetes-part-ii/"},"id":"18a8a6e9-5c49-534a-8ee9-1d815983f9d6","html":"<h1 id=\"imperative-vs-declarative\" style=\"position:relative;\"><a href=\"#imperative-vs-declarative\" aria-label=\"imperative vs declarative permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Imperative vs Declarative</h1>\n<ul>\n<li>in declarative, we just tell the desired state which kubernetes tries to achieve</li>\n<li>e.g. <code class=\"language-text\">apply</code> follows the declarative approach</li>\n<li>however, in the imperative approach, we have to give clear instructions</li>\n<li>all commands like <code class=\"language-text\">create</code>, <code class=\"language-text\">edit</code>, <code class=\"language-text\">replace</code>, <code class=\"language-text\">expose</code>, <code class=\"language-text\">run</code> etc. are imperative</li>\n<li>using declarative approach we can track configuration using version control as well for iac</li>\n<li>imperative approach can be used for hot fixes / experimental purpose</li>\n<li>when using <code class=\"language-text\">apply</code>, we can see the last yaml configuration converted to json which we had sent under <code class=\"language-text\">metadata.annotations</code> in <code class=\"language-text\">kubectl.kubernetes.io/last-applied-configuration</code>. this is used by kubernetes to keep track of changes and is only available when we use <code class=\"language-text\">apply</code></li>\n<li>if for e.g. we use <code class=\"language-text\">edit</code> to edit a resource, and that resource is not allowed to be edited, we just use <code class=\"language-text\">wq</code> to exit out of vim, and then that file gets saved to /tmp. we can then use <code class=\"language-text\">kubectl replace --force -f &lt;&lt;file>></code> to replace the existing resource with our newly configured one</li>\n</ul>\n<h1 id=\"ingress\" style=\"position:relative;\"><a href=\"#ingress\" aria-label=\"ingress permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ingress</h1>\n<ul>\n<li>it is like a layer 7 load balancer built inside the kubernetes cluster</li>\n<li>makes the services inside cluster accessible from outside</li>\n<li>we also want features like ssl termination, route requests based on domain, etc</li>\n<li>instead of multiple node ports / load balancers, we have one node port / load balancer which directs traffic to the ingress service. the ingress service can then direct traffic to the different cluster ips in the cluster</li>\n<li>kubernetes provides the ingress resource but not the ingress controller i.e. it provides the api which can be utilized by other third party implementations</li>\n<li>minikube has an addon that can be enabled\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">minikube addons <span class=\"token builtin class-name\">enable</span> ingress\nminikube addons list <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> ingress</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n</li>\n<li>to verify, <code class=\"language-text\">kubectl get all --all-namespaces</code> should show the <code class=\"language-text\">ingress-nginx-controller-*</code> pod running</li>\n<li>ingress is spun up using a deployment and a node port to expose it outside the cluster</li>\n<li>it also deploys configmaps to manage configuration and cluster roles to monitor kubernetes resources</li>\n<li>all resources are deployed in the ingress-nginx namespace</li>\n<li>we can also hit the endpoint http://minikube_ip/healthz to verify the working of ingress</li>\n<li>we can also provide a domain so that the requests are routed based on domain names</li>\n<li>we can also provide a catch-all entry</li>\n<li><a href=\"https://gist.github.com/shameekagarwal/97db31a89ba766cf2d0634c561a1b3e9\">in this example</a>, if requests come from custom-api.com, and start with request path <code class=\"language-text\">/api</code> they are routed to the api service, but all other requests are routed to the devops service</li>\n<li>note: to simulate that requests are coming from a specific domain on our local, we can use <code class=\"language-text\">curl -H \"Host: custom-api.com\" http://192.168.49.2/api/</code></li>\n<li>the ingress resource provided by kubernetes has limited functionality, so to configure the ingress controller provided by third party, we use annotations</li>\n<li>e.g. we want traffic from ingress-service/calendar to our calendar-cluster-ip:port. so, the calendar prefix should be removed. we can do this by using the annotation below -\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-yaml line-numbers\"><code class=\"language-yaml\"><span class=\"token key atrule\">annotations</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">nginx.ingress.kubernetes.io/rewrite-target</span><span class=\"token punctuation\">:</span> /</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\nso, <code class=\"language-text\">/calendar</code> in <code class=\"language-text\">rules[x].http.paths.path</code> gets replaced by the value in <code class=\"language-text\">rewrite-target</code> which is <code class=\"language-text\">/</code> here</li>\n<li>use <code class=\"language-text\">kubectl get ingress</code> to view the ingress resources</li>\n<li>my understanding - view the port of the node port service <code class=\"language-text\">ingress-nginx-controller</code> inside the <code class=\"language-text\">nginx-ingress</code> namespace. this is the port we hit when making requests to worker_node_ip</li>\n</ul>\n<h1 id=\"volumes\" style=\"position:relative;\"><a href=\"#volumes\" aria-label=\"volumes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Volumes</h1>\n<ul>\n<li>references to files and directories made available to containers</li>\n<li>the file system can be anywhere, e.g. outside the host as well i.e. this could be used for aws ebs as well</li>\n<li>e.g. it helps us preserve data across pod restarts</li>\n<li>there can be several types of volumes like host path, git repo (like host path but the path is a git repository) and even cloud specific like aws elastic block store</li>\n<li>empty dir volume type - if a container crashes, a new container is spun up in the same pod. however, if we don’t specify any volume, the container crash results in a loss of data. this can be prevented using empty dir volume type, which can survive container restarts but not pod restarts. it is usually chosen as the default by third party manifests and is expected to be replaced by a better solution like nfs</li>\n<li>an issue with using host volumes - it needs to be available on each node so that pods on different nodes can have access to it, and this of course is not an issue with minikube</li>\n<li>so, in cloud, we should ideally mount an nfs on each node, else we would have to copy this file on all nodes. for e.g., we should use aws efs. the syntax should be similar</li>\n</ul>\n<h3 id=\"example-1\" style=\"position:relative;\"><a href=\"#example-1\" aria-label=\"example 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example 1</h3>\n<ul>\n<li>for docker client to be able to communicate to the correct docker daemon, use the file /var/run/docker.sock</li>\n<li>e.g. we want to run docker commands on the host from pods. so, the container running inside the pod should have docker client installed to issue docker commands, and it should point to the docker daemon of the host</li>\n<li>so, we can use <code class=\"language-text\">hostPath</code> volume type</li>\n<li><a href=\"https://gist.github.com/shameekagarwal/f1686cffac86159b5259142f3044f731\">full yaml here</a></li>\n<li>now, we run the pod using <code class=\"language-text\">kubectl apply -f docker.yml</code></li>\n<li>then, we can issue commands like <code class=\"language-text\">kubectl exec docker -- docker image ls</code> to list the images on minikube</li>\n</ul>\n<h3 id=\"example-2\" style=\"position:relative;\"><a href=\"#example-2\" aria-label=\"example 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example 2</h3>\n<ul>\n<li>recall how for bind volumes in docker, we needed to specify a path in the host. the host now is minikube, so the host path needs to be that of minikube. before running <code class=\"language-text\">minikube start</code>, if i copy files to the path in ~/.minikube/files directory on my workstation, i can see those files in the root on minikube host. we can verify this using <code class=\"language-text\">minikube ssh</code> and then by running <code class=\"language-text\">ls /</code></li>\n<li>so, suppose we want to specify a configuration file for prometheus</li>\n<li>we can copy this configuration file to minikube and then use host path volumes to reference it</li>\n<li>in this example, a better solution would have been to create a custom image and use <code class=\"language-text\">COPY</code> in the docker file</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-yaml line-numbers\"><code class=\"language-yaml\"><span class=\"token comment\"># ...</span>\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token comment\"># ...</span>\n      <span class=\"token key atrule\">volumeMounts</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">mountPath</span><span class=\"token punctuation\">:</span> /etc/prometheus/prometheus.yml\n          <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> prom<span class=\"token punctuation\">-</span>conf\n\n  <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> prom<span class=\"token punctuation\">-</span>conf\n      <span class=\"token key atrule\">hostPath</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /prometheus<span class=\"token punctuation\">-</span>conf.yml\n        <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> File</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h1 id=\"config-maps\" style=\"position:relative;\"><a href=\"#config-maps\" aria-label=\"config maps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Config Maps</h1>\n<ul>\n<li>we can have different sources of configuration like environment variables, files, env files, literals, etc</li>\n</ul>\n<h3 id=\"default-config-map\" style=\"position:relative;\"><a href=\"#default-config-map\" aria-label=\"default config map permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Default Config Map</h3>\n<ul>\n<li>it is used to make calls to the kubernetes api from containers</li>\n<li><code class=\"language-text\">kubectl get configmaps</code> - kube-root-ca.crt is the config map created by default</li>\n<li><code class=\"language-text\">kubectl describe pods pod_name</code> will give the mount location of this config map. note that this config map may not be mounted to the pods in kube-system though</li>\n<li><code class=\"language-text\">kubectl exec pod_name -- ls /var/run/secrets/kubernetes.io/serviceaccount</code> shows that there are three files - namespace, ca.crt and token</li>\n<li>on reading online, i see that this can also be a secret instead of a configmap</li>\n</ul>\n<h3 id=\"mount-volumes\" style=\"position:relative;\"><a href=\"#mount-volumes\" aria-label=\"mount volumes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mount Volumes</h3>\n<ul>\n<li>config maps can mount the configuration as volumes to running containers</li>\n<li>imperative command - <code class=\"language-text\">kubectl create configmap prometheus-config --from-file=prometheus-conf.yml</code></li>\n<li><code class=\"language-text\">kubectl describe configmap prometheus-config</code></li>\n<li>using in the yml file -\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-yaml line-numbers\"><code class=\"language-yaml\"><span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token comment\"># ...</span>\n      <span class=\"token key atrule\">volumeMounts</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">mountPath</span><span class=\"token punctuation\">:</span> /etc/prometheus\n          <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> prometheus<span class=\"token punctuation\">-</span>config\n  <span class=\"token comment\"># ...</span>\n  <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> prometheus<span class=\"token punctuation\">-</span>config\n      <span class=\"token key atrule\">configMap</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> prometheus<span class=\"token punctuation\">-</span>config</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\nverify using <code class=\"language-text\">kubectl exec prometheus -- cat /etc/prometheus/prometheus-conf.yml</code></li>\n<li>instead of providing a file, we can use literals, e.g. <code class=\"language-text\">kubectl create configmap --from-literal=foo=bar</code></li>\n<li>in this case, if we use volume mounts, a file called foo would be created with its contents as bar</li>\n</ul>\n<h3 id=\"environment-variables\" style=\"position:relative;\"><a href=\"#environment-variables\" aria-label=\"environment variables permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Environment Variables</h3>\n<ul>\n<li>e.g. create a file called .env\n<div class=\"gatsby-highlight\" data-language=\"dotenv\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-dotenv line-numbers\"><code class=\"language-dotenv\">client-id=qwerty\nclient-secret=12345</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n</li>\n<li><code class=\"language-text\">kubectl create configmap api-credentials --from-env-file=.env</code></li>\n<li>usage -\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-yaml line-numbers\"><code class=\"language-yaml\"><span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token comment\">#...</span>\n    <span class=\"token key atrule\">envFrom</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">configMapRef</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> api<span class=\"token punctuation\">-</span>credentials</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>verify using <code class=\"language-text\">kubectl exec alpine -- env</code></li>\n<li>we can also inject the variables of the config map individually -\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-yaml line-numbers\"><code class=\"language-yaml\"><span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token comment\">#...</span>\n    <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> CLIENT_ID\n      <span class=\"token key atrule\">valueFrom</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">configMapKeyRef</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> api<span class=\"token punctuation\">-</span>credentials\n          <span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> client<span class=\"token punctuation\">-</span>id</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n</ul>\n<h1 id=\"secrets\" style=\"position:relative;\"><a href=\"#secrets\" aria-label=\"secrets permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Secrets</h1>\n<ul>\n<li>secrets are similar to config maps</li>\n<li>secrets can be of three types -\n<ul>\n<li>docker-registry - for pulling images from private registry</li>\n<li>tls - for storing certificates</li>\n<li>generic - works like config maps, so can have sources like <code class=\"language-text\">--from-env-file</code>, <code class=\"language-text\">--from-file</code>, <code class=\"language-text\">--from-literal</code></li>\n</ul>\n</li>\n<li>creating a secret imperatively -\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">kubectl create secret generic jenkins-credential \\\n  --from-literal=username=johndoe \\\n  --from-literal=password=incognito</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>to retrieve the original value -\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">kubectl get secret jenkins-credential --output=json\nkubectl get secret jenkins-credential --output=jsonpath=\"{.data.password}\" | base64 --decode</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n</li>\n<li>to use the secrets, we put them into files /etc/secret/jenkins-user and /etc/secret/jenkins-pass -\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-yaml line-numbers\"><code class=\"language-yaml\"><span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token comment\"># ...</span>\n      <span class=\"token key atrule\">volumeMounts</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">mountPath</span><span class=\"token punctuation\">:</span> /etc/secrets\n          <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> jenkins<span class=\"token punctuation\">-</span>credentials\n\n  <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> jenkins<span class=\"token punctuation\">-</span>credentials\n      <span class=\"token key atrule\">secret</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">secretName</span><span class=\"token punctuation\">:</span> jenkins<span class=\"token punctuation\">-</span>credential\n        <span class=\"token key atrule\">defaultMode</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0444</span>\n        <span class=\"token key atrule\">items</span><span class=\"token punctuation\">:</span>\n          <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> username\n            <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> jenkins<span class=\"token punctuation\">-</span>user\n          <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> password\n            <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> jenkins<span class=\"token punctuation\">-</span>pass</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>we made it read only for all users using 0444 as the mode</li>\n<li>verify using <code class=\"language-text\">kubectl exec pod_name -- cat /etc/secrets/jenkins-pass</code></li>\n<li>if creating secrets declaratively, the values should be base64 encoded first\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-yaml line-numbers\"><code class=\"language-yaml\"><span class=\"token comment\"># ...</span>\n<span class=\"token key atrule\">data</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> am9obmRvZQ==</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\nusing shell base64 utility -\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-shell line-numbers\"><code class=\"language-shell\"><span class=\"token comment\"># to encode</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-n</span> johndoe <span class=\"token operator\">|</span> base64\n\n<span class=\"token comment\"># to decode</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-n</span> <span class=\"token assign-left variable\">am9obmRvZQ</span><span class=\"token operator\">==</span> <span class=\"token operator\">|</span> base64 <span class=\"token parameter variable\">--decode</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>the only difference between config maps and secrets is that secrets are stored in tmpfs (temporary file storage) thus leaving no trace on the nodes</li>\n<li>secrets should be combined with rbac for limited access</li>\n<li>cons of using kubernetes secrets: secrets are stored in plain text in etcd, so anyone with access to etcd can read the secrets. so, we should use solutions like hashicorp vault, integrating it with kubernetes is smooth</li>\n</ul>\n<h3 id=\"docker-registry\" style=\"position:relative;\"><a href=\"#docker-registry\" aria-label=\"docker registry permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Docker Registry</h3>\n<ul>\n<li>by default, we use public docker registry</li>\n<li>sometimes we might need private registry</li>\n<li>we use <code class=\"language-text\">docker login</code> when using vanilla docker</li>\n<li>when using kubernetes, we can create the secret of type <code class=\"language-text\">docker-registry</code>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-shell line-numbers\"><code class=\"language-shell\">kubectl create secret docker-registry registry-credential <span class=\"token punctuation\">\\</span>\n  --docker-server<span class=\"token operator\">=</span><span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">\\</span>\n  --docker-username<span class=\"token operator\">=</span><span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">\\</span>\n  --docker-password<span class=\"token operator\">=</span><span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">\\</span>\n  --docker-email<span class=\"token operator\">=</span><span class=\"token punctuation\">..</span>.</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>we can then specify the name of the secret in pod\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-yaml line-numbers\"><code class=\"language-yaml\"><span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">imagePullSecrets</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> registry<span class=\"token punctuation\">-</span>credential</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n</li>\n</ul>\n<h1 id=\"namespaces\" style=\"position:relative;\"><a href=\"#namespaces\" aria-label=\"namespaces permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Namespaces</h1>\n<ul>\n<li>we can spin up multiple clusters to isolate the different environments. this can help prevent accidental changes to the production cluster</li>\n<li>however this has operational and resource overhead</li>\n<li>namespaces help us create different segments on a cluster</li>\n<li>namespaces are like virtual clusters</li>\n<li>we can scope resource limits and permissions to namespaces</li>\n<li>we use the “default namespace” by default</li>\n<li>we can run <code class=\"language-text\">kubectl get namespaces</code> to view all the available namespaces</li>\n<li>kube-public - the resources in this namespace are accessible to all (including unauthenticated) users</li>\n<li>kube-system - <code class=\"language-text\">kubectl get all --namespace=kube-system</code> shows the resources managed by kubernetes itself</li>\n<li>to create a namespace, use <code class=\"language-text\">kubectl create namespace staging</code></li>\n<li>if we set the namespace in context, we do not have to repeatedly suffix commands by <code class=\"language-text\">--namespace=staging</code>. e.g. we can use <code class=\"language-text\">kubectl config set-context $(kubectl config current-context) --namespace=staging</code></li>\n<li>when we delete a namespace, the cascading effect deletes all the resources within it as well. the command is <code class=\"language-text\">kubectl delete namespace staging</code></li>\n<li>in the resource files, we can also specify the <code class=\"language-text\">namespace</code> key under <code class=\"language-text\">metadata</code></li>\n</ul>\n<h1 id=\"rbac\" style=\"position:relative;\"><a href=\"#rbac\" aria-label=\"rbac permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RBAC</h1>\n<ul>\n<li>it allows us to control access to resources</li>\n<li>each request goes through three stages - authentication, authorization, and then through admission control</li>\n<li>authentication is done using static password files, static token files, certificates or identity services like ldap</li>\n<li>we can combine rbac with namespaces as well</li>\n</ul>\n<h3 id=\"static-files\" style=\"position:relative;\"><a href=\"#static-files\" aria-label=\"static files permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Static Files</h3>\n<ul>\n<li>we create a csv file with 4 columns - password, username, user id and optionally a group</li>\n<li>when starting the api server, we pass the file using a flag <code class=\"language-text\">--basic-auth-file=user-details.csv</code></li>\n<li>then, if sending requests using curl, we can pass credentials using <code class=\"language-text\">-u username:password</code></li>\n<li>we can also have tokens instead of passwords</li>\n<li>the flag we pass to api server in this case is <code class=\"language-text\">--token-auth-file</code></li>\n<li>we can pass the token via curl using <code class=\"language-text\">--header \"Authorization: Bearer &lt;token>\"</code></li>\n<li>this method is deprecated / unavailable in newer versions</li>\n</ul>\n<h3 id=\"certificates\" style=\"position:relative;\"><a href=\"#certificates\" aria-label=\"certificates permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Certificates</h3>\n<ul>\n<li>we need to be able to generate certificates for creating users</li>\n<li>we need two files -\n<ul>\n<li>the certificate which is a signed public key (files suffixed with .crt)</li>\n<li>a private key (files suffixed with .key)</li>\n</ul>\n</li>\n<li>certificates are needed by both servers and clients. there can be multiple combinations of server and client as well. the certificates required are listed below -\n<ul>\n<li>7 client certificates\n<ul>\n<li>3 - scheduler, control manager, kube proxy (to api server)</li>\n<li>api server (to kubelet)</li>\n<li>kubelet (to api server)</li>\n<li>api server (to etcd)</li>\n<li>user using kubectl (to api server)</li>\n</ul>\n</li>\n<li>3 server certificates - etcd, kubelet, api server</li>\n<li>the ca’s certificate</li>\n</ul>\n</li>\n<li>etcd cluster can have multiple nodes running on different servers for high availability</li>\n<li>so, we need to generate peer certificates so that the communication between the nodes is encrypted as well</li>\n<li>we can specify a config file while creating certificates using <code class=\"language-text\">--config</code></li>\n<li>config can be needed for e.g. to provide alternative names</li>\n<li><a href=\"https://kubernetes.io/docs/setup/best-practices/certificates/\">docs</a> for the certificates required by kubernetes components and their respective cas</li>\n<li>verify if <code class=\"language-text\">openssl version</code> works to be able to generate certificates</li>\n<li>generating keys and certificates -\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-shell line-numbers\"><code class=\"language-shell\">openssl genrsa <span class=\"token parameter variable\">-out</span> johndoe.key <span class=\"token number\">2048</span>\n\nopenssl req <span class=\"token parameter variable\">-new</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-key</span> johndoe.key <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-out</span> johndoe.csr <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-subj</span> <span class=\"token string\">\"/CN=johndoe/O=developers\"</span>\n\nopenssl x509 <span class=\"token parameter variable\">-req</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-in</span> johndoe.csr <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-CA</span> ~/.minikube/ca.crt <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-CAkey</span> ~/.minikube/ca.key <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-CAcreateserial</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-out</span> johndoe.crt <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-days</span> <span class=\"token number\">365</span>\n\n<span class=\"token comment\"># view the certificate details</span>\nopenssl x509 <span class=\"token parameter variable\">-noout</span> <span class=\"token parameter variable\">-text</span> <span class=\"token parameter variable\">-in</span> johndoe.crt</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>first a private key (.key) is generated</li>\n<li>then a certificate signing request (.csr) is generated. here <code class=\"language-text\">CN</code> or common name is analogous to the username and <code class=\"language-text\">O</code> or organization to the group</li>\n<li>then, using the csr and the ca certificate, the signed public key or the signed certificate (.crt) is generated</li>\n<li>instead of doing the steps after generating the csr manually, we can utilize the kubernetes api</li>\n<li>basically a resource type of <code class=\"language-text\">CertificateSigningRequest</code> is created, with the contents of the csr mentioned <strong>in a base64 encoded format</strong> in the yaml file</li>\n<li>the admin can then run <code class=\"language-text\">kubectl get certificatesigningrequests</code> to view pending requests</li>\n<li>requests can be approved via <code class=\"language-text\">kubectl certificate approve &lt;name_of_csr></code></li>\n<li>similarly, requests can be denied via <code class=\"language-text\">kubectl certificate deny &lt;name_of_csr></code></li>\n<li>to view the generated signed certificate, we can use <code class=\"language-text\">kubectl get certificatesigningrequest &lt;name_of_csr> --output=yaml</code>. it is again in the base64 encoded format, so we decode and store it in a file</li>\n<li>a controller manager signs these requests, so it needs ca files as well</li>\n<li>so, on running <code class=\"language-text\">sudo cat /etc/kubernetes/manifests/kube-controller-manager.yaml</code>, we can see -\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-yaml line-numbers\"><code class=\"language-yaml\"><span class=\"token comment\"># ...</span>\n<span class=\"token punctuation\">-</span> <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>cluster<span class=\"token punctuation\">-</span>signing<span class=\"token punctuation\">-</span>cert<span class=\"token punctuation\">-</span>file=/var/lib/minikube/certs/ca.crt\n<span class=\"token punctuation\">-</span> <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>cluster<span class=\"token punctuation\">-</span>signing<span class=\"token punctuation\">-</span>key<span class=\"token punctuation\">-</span>file=/var/lib/minikube/certs/ca.key</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>kubeadm certificates are typically located at <code class=\"language-text\">/etc/kubernetes/pki</code> for the control plane components while at <code class=\"language-text\">/var/lib/kubelet/pki</code> for kubelet</li>\n</ul>\n<h3 id=\"config\" style=\"position:relative;\"><a href=\"#config\" aria-label=\"config permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Config</h3>\n<ul>\n<li>we can specify flags like <code class=\"language-text\">--key</code>, <code class=\"language-text\">--cert</code> and <code class=\"language-text\">--cacert</code> when making requests via curl to api server</li>\n<li>we can also specify flags in kubectl everytime, e.g. <code class=\"language-text\">kubectl get pods --client-key=... --client-certificate=... --certificate-authority=...</code></li>\n<li>by default for all our requests using kubectl, the configuration is specified in ~/.kube/config. it also is like a kubernetes resource with <code class=\"language-text\">kind: Config</code>. so, instead of defaulting to ~/.kube/config in every command, we can specify the file using the <code class=\"language-text\">--kubeconfig</code> flag</li>\n<li>it has three parts - clusters, users and contexts</li>\n<li>clusters refer to the different kubernetes clusters that we would like to access</li>\n<li>the cluster requires the path to the ca server certificate and the api server address</li>\n<li>to get the server address, use <code class=\"language-text\">kubectl config view --output=jsonpath=\"{.clusters[0].cluster.server}\"</code></li>\n<li>the user requires the path to private key and signed certificate</li>\n<li>we can also provide the base64 encoded data directly instead of the path for the user / cluster</li>\n<li>contexts pair the clusters to users. so, they have the cluster, user and even the namespace to use by default</li>\n<li>the one used by default by kubectl is defined via <code class=\"language-text\">current-context</code></li>\n<li>create a new cluster -\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-shell line-numbers\"><code class=\"language-shell\"><span class=\"token function\">cp</span> ~/.minikube/ca.crt <span class=\"token builtin class-name\">.</span>\n\nkubectl config set-cluster johndoe <span class=\"token punctuation\">\\</span>\n  --certificate-authority ca.crt <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--server</span> https://192.168.49.2:8443 <span class=\"token comment\"># cluster server address</span>\n\nkubectl config get-clusters <span class=\"token comment\"># verify that the cluster is created</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>create a new user -\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-shell line-numbers\"><code class=\"language-shell\">kubectl config set-credentials johndoe <span class=\"token punctuation\">\\</span>\n  --client-certificate johndoe.crt <span class=\"token punctuation\">\\</span>\n  --client-key johndoe.key</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>create and set the context -\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-shell line-numbers\"><code class=\"language-shell\">kubectl config set-context johndoe <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--user</span> johndoe <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--cluster</span> johndoe <span class=\"token comment\"># create / edit the context</span>\n\nkubectl config use-context johndoe <span class=\"token comment\"># change the context</span>\n\nkubectl config get-contexts <span class=\"token comment\"># verify that the context is set</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>we can view the entire config using <code class=\"language-text\">kubectl config view</code> or <code class=\"language-text\">cat ~/.kube/config</code></li>\n<li>note: the context section can also take the namespace as an argument</li>\n</ul>\n<h3 id=\"authorization-modes\" style=\"position:relative;\"><a href=\"#authorization-modes\" aria-label=\"authorization modes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Authorization Modes</h3>\n<ul>\n<li>node - e.g. used by worker nodes, for kubelet to interact with api server</li>\n<li>rbac - attaching policies to role</li>\n<li>abac - attaching policies to users / groups directly</li>\n<li>webhooks - a third party agent like open policy agent</li>\n<li>to view authorization modes configured on the api server, we can use - <code class=\"language-text\">kubectl describe pod kube-apiserver-minikube --namespace=kube-system | grep authorization-mode</code></li>\n</ul>\n<h3 id=\"roles-and-bindings\" style=\"position:relative;\"><a href=\"#roles-and-bindings\" aria-label=\"roles and bindings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Roles and Bindings</h3>\n<ul>\n<li>rules, comprise of  -\n<ul>\n<li>verbs, e.g. get, list, create</li>\n<li>resources, e.g. pods</li>\n<li>resource names</li>\n<li>api groups of the resources</li>\n</ul>\n</li>\n<li>roles - they are a collection of rules. a role is applied to a namespace</li>\n<li>cluster role - same as roles but scoped to clusters</li>\n<li>resources like pods are namespaced while resources like nodes are cluster scoped. to get an exhaustive list, we can use <code class=\"language-text\">kubectl api-resources --namespaced=true</code> or set the flag to false</li>\n<li>subjects - can be user, service accounts (used by pods to interact with kubernetes api) or groups, which are a collection of users and service accounts</li>\n<li>we also have role bindings and cluster role bindings</li>\n<li><code class=\"language-text\">kubectl config get-users</code> - by default we have only one user minikube</li>\n<li>a few commands we can use include - <code class=\"language-text\">kubectl get roles</code>, <code class=\"language-text\">kubectl get clusterroles</code>, <code class=\"language-text\">kubectl get rolebindings</code>, <code class=\"language-text\">kubectl get clusterrolebindings</code></li>\n<li>we can also use <code class=\"language-text\">kubectl describe clusterrole view</code></li>\n<li>we already have some cluster roles and cluster role bindings created by default</li>\n<li>ones prefixed with <code class=\"language-text\">system:</code> should be generally avoided, so we can run <code class=\"language-text\">kubectl get clusterroles | grep -v system</code>. we get four roles, each of them has been described below</li>\n<li>view - can perform get, list and watch operations (verbs) on almost everything</li>\n<li>edit - everything that admin can do except modify roles and role bindings</li>\n<li>admin - everything that cluster-admin can do except modification to namespaces and resource quotas</li>\n<li>cluster-admin - can perform all operations. e.g. the default user minikube has this role. this can be verified by running <code class=\"language-text\">kubectl auth can-i \"*\" \"*\"</code></li>\n<li>to verify if an operation can be performed, we can use for instance <code class=\"language-text\">kubectl auth can-i get pods</code></li>\n<li>we can impersonate as someone else using <code class=\"language-text\">kubectl auth can-i get pods --as=johndoe</code></li>\n<li>creating a role binding -\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-shell line-numbers\"><code class=\"language-shell\">kubectl create rolebinding johndoe <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--clusterrole</span><span class=\"token operator\">=</span>view <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--user</span><span class=\"token operator\">=</span>johndoe <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--namespace</span><span class=\"token operator\">=</span>default</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\nverify using <code class=\"language-text\">kubectl describe rolebinding johndoe</code>. note: sometimes in kubectl outputs, the namespace field is empty when it is referring to the default namespace</li>\n<li>my understanding - role bindings can reference cluster roles, it just means that the permissions would be granted on the specified namespace only. this allows for role reuse. the view role allows to view in any namespace, and by creating a role binding we can limit the user’s usage to a namespace</li>\n<li>delete a role binding using <code class=\"language-text\">kubectl delete rolebinding johndoe</code></li>\n<li>using role bindings, we can attach one role to multiple subjects</li>\n<li>declaratively creating a cluster role binding using yaml -\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-yaml line-numbers\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> rbac.authorization.k8s.io/v1\n\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> ClusterRoleBinding\n\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> johndoe<span class=\"token punctuation\">-</span>view\n\n<span class=\"token key atrule\">roleRef</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">apiGroup</span><span class=\"token punctuation\">:</span> rbac.authorization.k8s.io\n  <span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> ClusterRole\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> view\n\n<span class=\"token key atrule\">subjects</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">apiGroup</span><span class=\"token punctuation\">:</span> rbac.authorization.k8s.io\n    <span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> User\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> johndoe</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\nnote how role bindings have a single role but can have multiple subjects</li>\n<li>verify using <code class=\"language-text\">kubectl auth can-i get pods --as=johndoe --all-namespaces</code></li>\n<li>describing the admin cluster role created by default -  <code class=\"language-text\">kubectl describe clusterrole admin</code></li>\n<li>e.g. yml to create a custom role -\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-yaml line-numbers\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> rbac.authorization.k8s.io/v1\n\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> ClusterRole\n\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> release<span class=\"token punctuation\">-</span>manager\n\n<span class=\"token key atrule\">rules</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"pods\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pods/attach\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pods/exec\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pods/log\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pods/status\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token key atrule\">verbs</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token key atrule\">apiGroups</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"deployments\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"replicasets\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token key atrule\">verbs</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"create\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"get\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"list\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"update\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"watch\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token key atrule\">apiGroups</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"apps\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"extensions\"</span><span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>note: to grant permissions for different operations on pods, specifying the resources as <code class=\"language-text\">pods</code> is not enough, as there can be other sub resources like <code class=\"language-text\">pods/logs</code> etc</li>\n<li>instead of users, we can also use groups in role bindings and cluster role bindings, by changing the kind to groups. the group a user belongs to was specified while generating the certificate</li>\n<li>my understanding - when relying on groups for role bindings, using the correct context is important when running <code class=\"language-text\">kubectl auth can-i...</code> command, since the certificates associated with the context are used to validate the request. by just using <code class=\"language-text\">--as</code>, we specify the user, but for e.g. the group comes from the value of <code class=\"language-text\">O</code> in the subject when generating signed certificates. optionally, we can specify the flags like <code class=\"language-text\">--client-certificate</code>, <code class=\"language-text\">--client-key</code> etc</li>\n</ul>\n<h3 id=\"service-accounts\" style=\"position:relative;\"><a href=\"#service-accounts\" aria-label=\"service accounts permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Service Accounts</h3>\n<ul>\n<li>it is used by applications to interact with the kubernetes cluster</li>\n<li>if we run <code class=\"language-text\">kubectl get serviceaccounts</code>, we see the default service account is already present</li>\n<li>we can create a service account using <code class=\"language-text\">kubectl create serviceaccount app</code></li>\n<li>recall the <a href=\"#default-config-map\">default config map</a></li>\n<li>creating a service account creates a secret, which has a token behind the scenes</li>\n<li>so, we can use these tokens to make requests, by adding the header - <code class=\"language-text\">Authorization: Bearer &lt;token></code></li>\n<li>the method above is useful when the functionality is outside the kubernetes cluster</li>\n<li>however, if the application is a part of our kubernetes cluster, we can simply mount the service account. i.e. use the <code class=\"language-text\">serviceAccountName</code> field in pods</li>\n<li>we can also manually set the <code class=\"language-text\">automountServiceAccountToken</code> to false in order to disable the automatic mounting of the default service account</li>\n<li>in newer versions of kubernetes, some changes have been made - service accounts now no longer automatically have a token associated with them. instead, the token request api is used to generate a token which then gets mounted on the pods</li>\n<li>we can generate a token for a service account using <code class=\"language-text\">kubectl create token &lt;&lt;service-account-name>></code>, and provide configuration parameters like expiration time</li>\n<li>so, because of service account, we could potentially do -\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-shell line-numbers\"><code class=\"language-shell\"><span class=\"token function\">find</span> / <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> serviceaccount\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">CACERT</span><span class=\"token operator\">=</span>/run/secrets/kubernetes.io/serviceaccount/ca.crt\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">TOKEN</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">cat</span> /run/secrets/kubernetes.io/serviceaccount/token<span class=\"token variable\">)</span></span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">--cacert</span> <span class=\"token variable\">$CACERT</span> https://kubernetes.default/api/v1/secrets <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-H</span> <span class=\"token string\">\"Authorization: Bearer <span class=\"token variable\">${TOKEN}</span>\"</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n</ul>","frontmatter":{"title":"Kubernetes - Part II"}}},"pageContext":{"id":"18a8a6e9-5c49-534a-8ee9-1d815983f9d6"}},"staticQueryHashes":["1037383464","1617985380"]}